class SuperComplexTest {
    float customPower(float base; int exponent) {
        if (exponent == 0) then {
            return 1;
        } else if (exponent % 2 == 0) then {
            float temp = this.customPower(base, exponent \ 2);
            return temp * temp;
        } else {
            float temp = this.customPower(base, (exponent - 1) \ 2);
            return base * temp * temp;
        }
    }

    static int fibonacci(int n) {
        if (n <= 1) then {
            return n;
        } else {
            return this.fibonacci(n - 1) + this.fibonacci(n - 2);
        }
    }

    static void main() {
        float sum = 0;
        int finalValue = 0;
        for i := 1 to 10 do {
            int factorial = 1;
            int fibonacciSum = 0;

            for j := 1 to i do {
                factorial := factorial * j;
                fibonacciSum := fibonacciSum + this.fibonacci(j);
            }
            {
            float customPowerResult = this.customPower(factorial, i);
            sum := sum + customPowerResult * fibonacciSum;
            }
        }

        

        for k := 1 to 5 do {
            if (k % 2 == 0)then {
                finalValue := finalValue + this.customPower(sum, k) + k;
            } else {
                finalValue := finalValue - this.customPower(sum, k) - k;
            }
        }

        io.writeStrLn("Final Value: " ^ finalValue);
    }
}