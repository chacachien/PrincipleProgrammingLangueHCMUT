Program([ClassDecl(Id(SuperComplexTest),[MethodDecl(Id(customPower),Static,[param(Id(base),FloatType),param(Id(exponent),IntType)],FloatType,Block([],[If(BinaryOp(==,Id(exponent),IntLit(0)),Block([],[Return(IntLit(1))]),If(BinaryOp(==,BinaryOp(%,Id(exponent),IntLit(2)),IntLit(0)),Block([VarDecl(Id(temp),FloatType,CallExpr(Self(),Id(customPower),[Id(base),BinaryOp(/,Id(exponent),IntLit(2))]))],[Return(BinaryOp(*,Id(temp),Id(temp)))]),Block([VarDecl(Id(temp),FloatType,CallExpr(Self(),Id(customPower),[Id(base),BinaryOp(/,BinaryOp(-,Id(exponent),IntLit(1)),IntLit(2))]))],[Return(BinaryOp(*,BinaryOp(*,Id(base),Id(temp)),Id(temp)))])))])),MethodDecl(Id(fibonacci),Static,[param(Id(n),IntType)],IntType,Block([],[If(BinaryOp(<=,Id(n),IntLit(1)),Block([],[Return(Id(n))]),Block([],[Return(BinaryOp(+,CallExpr(Self(),Id(fibonacci),[BinaryOp(-,Id(n),IntLit(1))]),CallExpr(Self(),Id(fibonacci),[BinaryOp(-,Id(n),IntLit(2))])))]))])),MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(sum),FloatType,IntLit(0)),VarDecl(Id(finalValue),IntType,IntLit(0))],[For(Id(i),IntLit(1),IntLit(10),True,Block([VarDecl(Id(factorial),IntType,IntLit(1)),VarDecl(Id(fibonacciSum),IntType,IntLit(0))],[For(Id(j),IntLit(1),Id(i),True,Block([],[AssignStmt(Id(factorial),BinaryOp(*,Id(factorial),Id(j))),AssignStmt(Id(fibonacciSum),BinaryOp(+,Id(fibonacciSum),CallExpr(Self(),Id(fibonacci),[Id(j)])))])]),Block([VarDecl(Id(customPowerResult),FloatType,CallExpr(Self(),Id(customPower),[Id(factorial),Id(i)]))],[AssignStmt(Id(sum),BinaryOp(+,Id(sum),BinaryOp(*,Id(customPowerResult),Id(fibonacciSum))))])])]),For(Id(k),IntLit(1),IntLit(5),True,Block([],[If(BinaryOp(==,BinaryOp(%,Id(k),IntLit(2)),IntLit(0)),Block([],[AssignStmt(Id(finalValue),BinaryOp(+,BinaryOp(+,Id(finalValue),CallExpr(Self(),Id(customPower),[Id(sum),Id(k)])),Id(k)))]),Block([],[AssignStmt(Id(finalValue),BinaryOp(-,BinaryOp(-,Id(finalValue),CallExpr(Self(),Id(customPower),[Id(sum),Id(k)])),Id(k)))]))])]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Final Value: ),Id(finalValue))])]))])])