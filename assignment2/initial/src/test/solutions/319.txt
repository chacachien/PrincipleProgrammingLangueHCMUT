Program([ClassDecl(Id(Math),[MethodDecl(Id(factorial),Static,[param(Id(n),IntType)],IntType,Block([],[If(BinaryOp(==,Id(n),IntLit(0)),Block([],[Return(IntLit(1))]),Block([],[Return(BinaryOp(*,Id(n),CallExpr(Self(),Id(factorial),[BinaryOp(-,Id(n),IntLit(1))])))]))])),MethodDecl(Id(fibonacci),Static,[param(Id(n),IntType)],IntType,Block([],[If(BinaryOp(<=,Id(n),IntLit(1)),Block([],[Return(Id(n))]),Block([],[Return(BinaryOp(+,CallExpr(Self(),Id(fibonacci),[BinaryOp(-,Id(n),IntLit(1))]),CallExpr(Self(),Id(fibonacci),[BinaryOp(-,Id(n),IntLit(2))])))]))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(num1),IntType,IntLit(5)),VarDecl(Id(num2),IntType,IntLit(6)),VarDecl(Id(factNum1),IntType,CallExpr(Id(Math),Id(factorial),[Id(num1)])),VarDecl(Id(factNum2),IntType,CallExpr(Id(Math),Id(factorial),[Id(num2)])),VarDecl(Id(fibNum1),IntType,CallExpr(Id(Math),Id(fibonacci),[Id(num1)])),VarDecl(Id(fibNum2),IntType,CallExpr(Id(Math),Id(fibonacci),[Id(num2)]))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Factorial_of),Id(num1)),StringLit(:)),Id(factNum1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Factorial_of),Id(num2)),StringLit(:)),Id(factNum2))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Fibonacci_of),Id(num1)),StringLit(:)),Id(fibNum1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Fibonacci_of),Id(num2)),StringLit(:)),Id(fibNum2))])]))])])