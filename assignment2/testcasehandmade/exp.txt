testcase300:Program([ClassDecl(Id(a),[AttributeDecl(Instance,VarDecl(Id(b),FloatType)),AttributeDecl(Instance,VarDecl(Id(c),FloatType))])])
---
testcase301:Program([ClassDecl(Id(a),[AttributeDecl(Instance,VarDecl(Id(b),FloatType,IntLit(3))),AttributeDecl(Instance,VarDecl(Id(d),FloatType,IntLit(3))),AttributeDecl(Instance,VarDecl(Id(c),FloatType,BinaryOp(+,IntLit(3),IntLit(4))))])])
---
testcase302:Program([ClassDecl(Id(a),[AttributeDecl(Static,ConstDecl(Id(c),BoolType,IntLit(2)))])])
---
testcase303:Program([ClassDecl(Id(a),[AttributeDecl(Static,ConstDecl(Id(c),IntType,IntLit(1)))])])
---
testcase304:Program([ClassDecl(Id(a),[AttributeDecl(Static,VarDecl(Id(a),FloatType))])])
---
testcase305:Program([ClassDecl(Id(Rectangle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))]))])])
---
testcase306:Program([ClassDecl(Id(Rectangle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))])),MethodDecl(Id(getLength),Instance,[],FloatType,Block([],[Return(BinaryOp(+,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))]))])])
---
testcase307:Program([ClassDecl(Id(Shape),[AttributeDecl(Instance,VarDecl(Id(length),FloatType)),AttributeDecl(Instance,VarDecl(Id(width),FloatType)),MethodDecl(Id(getNumOfShape),Static,[],IntType,Block([],[Return(Id(numOfShape))]))])])
---
testcase308:Program([ClassDecl(Id(Rectangle),[MethodDecl(Id(getArea),Instance,[param(Id(a),FloatType),param(Id(b),FloatType),param(Id(c),IntType)],FloatType,Block([],[Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))]))])])
---
testcase309:Program([ClassDecl(Id(Shape),[AttributeDecl(Static,ConstDecl(Id(numOfShape),IntType,IntLit(0))),AttributeDecl(Instance,ConstDecl(Id(immuAttribute),IntType,IntLit(0))),AttributeDecl(Instance,VarDecl(Id(length),FloatType)),AttributeDecl(Instance,VarDecl(Id(width),FloatType)),MethodDecl(Id(getNumOfShape),Static,[],IntType,Block([],[Return(Id(numOfShape))]))]),ClassDecl(Id(Rectangle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))]))])])
---
testcase310:Program([ClassDecl(Id(Test),[AttributeDecl(Instance,VarDecl(Id(a),IntType)),AttributeDecl(Instance,VarDecl(Id(b),FloatType)),AttributeDecl(Instance,VarDecl(Id(c),BoolType))])])
---
testcase311:Program([ClassDecl(Id(Circle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,BinaryOp(*,FloatLit(3.14),FieldAccess(Self(),Id(radius))),FieldAccess(Self(),Id(radius))))]))])])
---
testcase312:Program([ClassDecl(Id(Test),[MethodDecl(Id(printMessage),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Hello, World!)])]))])])
---
testcase313:Program([ClassDecl(Id(Math),[MethodDecl(Id(max),Static,[param(Id(a),IntType),param(Id(b),IntType)],IntType,Block([],[If(BinaryOp(>,Id(a),Id(b)),Return(Id(a)),Return(Id(b)))]))])])
---
testcase314:Program([ClassDecl(Id(Circle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,BinaryOp(*,FloatLit(3.14),FieldAccess(Self(),Id(radius))),FieldAccess(Self(),Id(radius))))]))]),ClassDecl(Id(Square),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(length))))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(c),ClassType(Id(Shape))),VarDecl(Id(s),ClassType(Id(Shape))),VarDecl(Id(area1),FloatType),VarDecl(Id(area2),FloatType)],[AssignStmt(Id(c),NewExpr(Id(Circle),[])),AssignStmt(Id(s),NewExpr(Id(Square),[])),AssignStmt(Id(area1),CallExpr(Id(c),Id(getArea),[])),AssignStmt(Id(area2),CallExpr(Id(s),Id(getArea),[])),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Area of Circle: ),Id(area1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Area of Square: ),Id(area2))])]))])])
---
testcase315:Program([ClassDecl(Id(Shape),[AttributeDecl(Instance,VarDecl(Id(length),FloatType)),AttributeDecl(Instance,VarDecl(Id(width),FloatType)),MethodDecl(Id(Shape),Instance,[param(Id(l),FloatType),param(Id(w),FloatType)],Block([],[AssignStmt(FieldAccess(Self(),Id(length)),Id(l)),AssignStmt(FieldAccess(Self(),Id(width)),Id(w))]))]),ClassDecl(Id(Circle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,BinaryOp(*,FloatLit(3.14),FieldAccess(Self(),Id(radius))),FieldAccess(Self(),Id(radius))))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(c),ClassType(Id(Circle)),NewExpr(Id(Circle),[FloatLit(5.0),FloatLit(5.0)])),VarDecl(Id(area),FloatType,CallExpr(Id(c),Id(getArea),[]))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Area of Circle: ),Id(area))])]))])])
---
testcase316:Program([ClassDecl(Id(Animal),[AttributeDecl(Instance,VarDecl(Id(name),StringType)),AttributeDecl(Instance,VarDecl(Id(age),IntType)),MethodDecl(Id(Animal),Instance,[param(Id(name),StringType),param(Id(age),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(name)),Id(name)),AssignStmt(FieldAccess(Self(),Id(age)),Id(age))])),MethodDecl(Id(makeSound),Instance,[],VoidType,Block([],[]))]),ClassDecl(Id(Dog),Id(Animal),[AttributeDecl(Instance,VarDecl(Id(breed),StringType)),MethodDecl(Id(Dog),Instance,[param(Id(name),StringType),param(Id(age),IntType),param(Id(breed),StringType)],Block([],[Call(Self(),Id(Animal),[Id(name),Id(age)]),AssignStmt(FieldAccess(Self(),Id(breed)),Id(breed))])),MethodDecl(Id(makeSound),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Woof! Woof!)])])),MethodDecl(Id(fetch),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Fetching the ball!)])]))]),ClassDecl(Id(Cat),Id(Animal),[AttributeDecl(Instance,VarDecl(Id(furColor),StringType)),MethodDecl(Id(Cat),Instance,[param(Id(name),StringType),param(Id(age),IntType),param(Id(furColor),StringType)],Block([],[Call(Self(),Id(Animal),[Id(name),Id(age)]),AssignStmt(FieldAccess(Self(),Id(furColor)),Id(furColor))])),MethodDecl(Id(makeSound),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Meow!)])])),MethodDecl(Id(climbTree),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Climbing the tree!)])]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(dog),ClassType(Id(Dog)),NewExpr(Id(Dog),[StringLit(Buddy),IntLit(3),StringLit(Labrador)])),VarDecl(Id(cat),ClassType(Id(Cat)),NewExpr(Id(Cat),[StringLit(Whiskers),IntLit(2),StringLit(Gray)])),VarDecl(Id(animal1),ClassType(Id(Animal)),Id(dog)),VarDecl(Id(animal2),ClassType(Id(Animal)),Id(cat))],[Call(Id(dog),Id(makeSound),[]),Call(Id(cat),Id(makeSound),[]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Dog's breed: ),FieldAccess(Id(dog),Id(breed)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Cat's fur color: ),FieldAccess(Id(cat),Id(furColor)))]),Call(Id(animal1),Id(makeSound),[]),Call(Id(animal2),Id(makeSound),[]),Call(Id(animal1),Id(fetch),[]),Call(Id(animal2),Id(climbTree),[])]))])])
---
testcase317:Program([ClassDecl(Id(Point),[AttributeDecl(Instance,VarDecl(Id(x),IntType)),AttributeDecl(Instance,VarDecl(Id(y),IntType)),MethodDecl(Id(Point),Instance,[param(Id(x),IntType),param(Id(y),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(x)),Id(x)),AssignStmt(FieldAccess(Self(),Id(y)),Id(y))])),MethodDecl(Id(display),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(x: ),FieldAccess(Self(),Id(x))),StringLit(, y: )),FieldAccess(Self(),Id(y)))])])),MethodDecl(Id(add),Static,[param(Id(p1),ClassType(Id(Point))),param(Id(p2),ClassType(Id(Point)))],ClassType(Id(Point)),Block([],[Return(NewExpr(Id(Point),[BinaryOp(+,FieldAccess(Id(p1),Id(x)),FieldAccess(Id(p2),Id(x))),BinaryOp(+,FieldAccess(Id(p1),Id(y)),FieldAccess(Id(p2),Id(y)))]))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(p1),ClassType(Id(Point)),NewExpr(Id(Point),[IntLit(3),IntLit(5)])),VarDecl(Id(p2),ClassType(Id(Point)),NewExpr(Id(Point),[UnaryOp(-,IntLit(2)),IntLit(7)])),VarDecl(Id(sum),ClassType(Id(Point)),CallExpr(Id(Point),Id(add),[Id(p1),Id(p2)]))],[Call(Id(p1),Id(display),[]),Call(Id(p2),Id(display),[]),Call(Id(sum),Id(display),[])]))])])
---
testcase318:Program([ClassDecl(Id(Student),[AttributeDecl(Instance,VarDecl(Id(name),StringType)),AttributeDecl(Instance,VarDecl(Id(age),IntType)),AttributeDecl(Instance,VarDecl(Id(gpa),FloatType)),MethodDecl(Id(Student),Instance,[param(Id(name),StringType),param(Id(age),IntType),param(Id(gpa),FloatType)],Block([],[AssignStmt(FieldAccess(Self(),Id(name)),Id(name)),AssignStmt(FieldAccess(Self(),Id(age)),Id(age)),AssignStmt(FieldAccess(Self(),Id(gpa)),Id(gpa))])),MethodDecl(Id(display),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Name:),FieldAccess(Self(),Id(name)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Age:),FieldAccess(Self(),Id(age)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(GPA:),FieldAccess(Self(),Id(gpa)))])])),MethodDecl(Id(getGrade),Instance,[],StringType,Block([],[If(BinaryOp(>=,FieldAccess(Self(),Id(gpa)),FloatLit(3.5)),Return(StringLit(A)),Block([],[If(BinaryOp(>=,FieldAccess(Self(),Id(gpa)),FloatLit(3.0)),Return(StringLit(B)),Block([],[If(BinaryOp(>=,FieldAccess(Self(),Id(gpa)),FloatLit(2.0)),Return(StringLit(C)),Block([],[If(BinaryOp(>=,FieldAccess(Self(),Id(gpa)),FloatLit(1.0)),Return(StringLit(D)),Return(StringLit(F)))]))]))]))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(s1),ClassType(Id(Student)),NewExpr(Id(Student),[StringLit(Alice),IntLit(20),FloatLit(3.8)])),VarDecl(Id(s2),ClassType(Id(Student)),NewExpr(Id(Student),[StringLit(Bob),IntLit(19),FloatLit(2.9)]))],[Call(Id(s1),Id(display),[]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Grade:),CallExpr(Id(s1),Id(getGrade),[]))]),Call(Id(s2),Id(display),[]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Grade:),CallExpr(Id(s2),Id(getGrade),[]))])]))])])
---
testcase319:Program([ClassDecl(Id(Math),[MethodDecl(Id(factorial),Static,[param(Id(n),IntType)],IntType,Block([],[If(BinaryOp(==,Id(n),IntLit(0)),Block([],[Return(IntLit(1))]),Block([],[Return(BinaryOp(*,Id(n),CallExpr(Self(),Id(factorial),[BinaryOp(-,Id(n),IntLit(1))])))]))])),MethodDecl(Id(fibonacci),Static,[param(Id(n),IntType)],IntType,Block([],[If(BinaryOp(<=,Id(n),IntLit(1)),Block([],[Return(Id(n))]),Block([],[Return(BinaryOp(+,CallExpr(Self(),Id(fibonacci),[BinaryOp(-,Id(n),IntLit(1))]),CallExpr(Self(),Id(fibonacci),[BinaryOp(-,Id(n),IntLit(2))])))]))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(num1),IntType,IntLit(5)),VarDecl(Id(num2),IntType,IntLit(6)),VarDecl(Id(factNum1),IntType,CallExpr(Id(Math),Id(factorial),[Id(num1)])),VarDecl(Id(factNum2),IntType,CallExpr(Id(Math),Id(factorial),[Id(num2)])),VarDecl(Id(fibNum1),IntType,CallExpr(Id(Math),Id(fibonacci),[Id(num1)])),VarDecl(Id(fibNum2),IntType,CallExpr(Id(Math),Id(fibonacci),[Id(num2)]))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Factorial_of),Id(num1)),StringLit(:)),Id(factNum1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Factorial_of),Id(num2)),StringLit(:)),Id(factNum2))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Fibonacci_of),Id(num1)),StringLit(:)),Id(fibNum1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Fibonacci_of),Id(num2)),StringLit(:)),Id(fibNum2))])]))])])
---
testcase320:Program([ClassDecl(Id(Bank),[AttributeDecl(Instance,VarDecl(Id(interestRate),FloatType)),MethodDecl(Id(Bank),Instance,[param(Id(rate),FloatType)],Block([],[AssignStmt(FieldAccess(Self(),Id(interestRate)),Id(rate))])),MethodDecl(Id(calculateInterest),Instance,[param(Id(principal),FloatType)],FloatType,Block([],[Return(BinaryOp(*,Id(principal),FieldAccess(Self(),Id(interestRate))))]))]),ClassDecl(Id(SavingsAccount),Id(Bank),[MethodDecl(Id(SavingsAccount),Instance,[param(Id(rate),FloatType)],Block([],[Call(Self(),Id(Bank),[Id(rate)])])),MethodDecl(Id(calculateInterestReal),Instance,[param(Id(principal),FloatType)],FloatType,Block([],[Return(BinaryOp(+,CallExpr(Self(),Id(calculateInterest),[Id(principal)]),IntLit(100)))]))]),ClassDecl(Id(FixedDeposit),Id(Bank),[MethodDecl(Id(FixedDeposit),Instance,[param(Id(rate),FloatType)],Block([],[Call(Self(),Id(Bank),[Id(rate)])])),MethodDecl(Id(calculateInterestReal),Instance,[param(Id(principal),FloatType),param(Id(years),IntType)],FloatType,Block([],[Return(BinaryOp(*,CallExpr(Self(),Id(calculateInterest),[Id(principal)]),Id(years)))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(bank1),ClassType(Id(Bank))),VarDecl(Id(bank2),ClassType(Id(Bank))),VarDecl(Id(principal),FloatType,FloatLit(1000.0)),VarDecl(Id(interest1),FloatType),VarDecl(Id(interest2),FloatType)],[AssignStmt(Id(bank1),NewExpr(Id(SavingsAccount),[FloatLit(0.05)])),AssignStmt(Id(bank2),NewExpr(Id(FixedDeposit),[FloatLit(0.08)])),AssignStmt(Id(interest1),CallExpr(Id(bank1),Id(calculateInterest),[Id(principal)])),AssignStmt(Id(interest2),CallExpr(Id(bank2),Id(calculateInterest),[Id(principal),IntLit(5)])),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Interest_from_Savings_Account:),Id(interest1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Interest_from_Fixed Deposit:),Id(interest2))])]))])])
---
testcase321:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(a),IntType,IntLit(5)),VarDecl(Id(b),IntType,IntLit(10)),VarDecl(Id(c),IntType,IntLit(15)),VarDecl(Id(result),BoolType,BinaryOp(>=,BinaryOp(+,Id(a),BinaryOp(*,Id(b),Id(c))),BinaryOp(&&,BinaryOp(-,Id(c),BinaryOp(/,Id(b),Id(a))),UnaryOp(!,BinaryOp(>,Id(a),Id(b))))))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result: ),Id(result))])]))])])
---
testcase322:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(p),BoolType,BooleanLit(True)),VarDecl(Id(q),BoolType,BooleanLit(False)),VarDecl(Id(result),BoolType,BinaryOp(||,BinaryOp(&&,Id(p),Id(q)),UnaryOp(!,Id(p))))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result:),Id(result))])]))])])
---
testcase323:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(a),IntType,IntLit(5)),VarDecl(Id(b),IntType,IntLit(10)),VarDecl(Id(c),IntType,IntLit(15)),VarDecl(Id(result1),BoolType,BinaryOp(>,BinaryOp(*,BinaryOp(+,Id(a),Id(b)),Id(c)),BinaryOp(+,Id(a),BinaryOp(*,Id(b),Id(c))))),VarDecl(Id(result2),BoolType,BinaryOp(||,BinaryOp(&&,BinaryOp(>=,Id(a),Id(b)),BinaryOp(<,Id(c),Id(a))),BinaryOp(<=,Id(b),Id(c)))),VarDecl(Id(result3),BoolType,BinaryOp(&&,UnaryOp(!,BinaryOp(!=,BinaryOp(||,BinaryOp(==,Id(a),Id(b)),Id(c)),Id(b))),UnaryOp(!,BinaryOp(>,Id(c),BinaryOp(&&,Id(a),BinaryOp(<,Id(b),Id(c)))))))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result 1: ),Id(result1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result 2: ),Id(result2))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result 3: ),Id(result3))])]))])])
---
testcase324:Program([ClassDecl(Id(Person),[AttributeDecl(Instance,VarDecl(Id(name),StringType)),AttributeDecl(Instance,VarDecl(Id(age),IntType)),MethodDecl(Id(Person),Instance,[param(Id(n),StringType),param(Id(a),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(name)),Id(n)),AssignStmt(FieldAccess(Self(),Id(age)),Id(a))])),MethodDecl(Id(display),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Name:),FieldAccess(Self(),Id(name)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Age:),FieldAccess(Self(),Id(age)))])]))])])
---
testcase325:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(persons),ArrayType(3,ClassType(Id(Person)))),VarDecl(Id(totalAge),IntType,IntLit(0))],[AssignStmt(ArrayCell(Id(persons),IntLit(0)),NewExpr(Id(Person),[StringLit(Alice),IntLit(25)])),AssignStmt(ArrayCell(Id(persons),IntLit(1)),NewExpr(Id(Person),[StringLit(Bob),IntLit(30)])),AssignStmt(ArrayCell(Id(persons),IntLit(2)),NewExpr(Id(Person),[StringLit(Charlie),IntLit(22)])),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Total Age:),Id(totalAge))])]))])])
---
testcase326:Program([ClassDecl(Id(Library),[AttributeDecl(Instance,VarDecl(Id(books),ArrayType(5,ClassType(Id(Book))))),MethodDecl(Id(Library),Instance,[param(Id(b),ArrayType(5,ClassType(Id(Book))))],Block([],[AssignStmt(Id(books),Id(b))])),MethodDecl(Id(displayBooks),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Library_Catalog:)]),For(Id(i),IntLit(0),FieldAccess(Id(books),Id(length)),True,Block([],[Call(ArrayCell(Id(books),Id(i)),Id(displayInfo),[])])])]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(bookList),ArrayType(3,ClassType(Id(Book)))),VarDecl(Id(myLibrary),ClassType(Id(Library)),NewExpr(Id(Library),[Id(bookList)]))],[AssignStmt(ArrayCell(Id(bookList),IntLit(0)),NewExpr(Id(Book),[StringLit(HarryPotter),StringLit(J.K.Rowling)])),AssignStmt(ArrayCell(Id(bookList),IntLit(1)),NewExpr(Id(Book),[StringLit(TheHobbit),StringLit(J.R.R.Tolkien)]))]))])])
---
testcase327:Program([ClassDecl(Id(array),[MethodDecl(Id(test),Instance,[],VoidType,Block([],[AssignStmt(ArrayCell(FieldAccess(Id(x),Id(b)),IntLit(2)),ArrayCell(CallExpr(Id(x),Id(m),[]),IntLit(3)))]))])])
---
testcase328:Program([ClassDecl(Id(array),[MethodDecl(Id(test),Instance,[],VoidType,Block([],[AssignStmt(ArrayCell(Id(a),BinaryOp(+,IntLit(3),CallExpr(Id(x),Id(foo),[IntLit(2)]))),BinaryOp(+,ArrayCell(Id(a),ArrayCell(Id(b),IntLit(2))),IntLit(3)))]))])])
---
testcase329:Program([ClassDecl(Id(Shape),[AttributeDecl(Static,ConstDecl(Id(numOfShape),IntType,IntLit(0))),AttributeDecl(Instance,ConstDecl(Id(immuAttribute),IntType,IntLit(0))),AttributeDecl(Instance,VarDecl(Id(length),FloatType)),AttributeDecl(Instance,VarDecl(Id(width),FloatType)),MethodDecl(Id(getNumOfShape),Static,[],IntType,Block([],[Return(Id(numOfShape))]))])])
---
testcase330:Program([ClassDecl(Id(test),[MethodDecl(Id(main),Instance,[],VoidType,Block([VarDecl(Id(s),ClassType(Id(Shape)))],[AssignStmt(Id(s),NewExpr(Id(Rectangle),[IntLit(3),IntLit(4)])),AssignStmt(Id(s),NewExpr(Id(Triangle),[IntLit(3),IntLit(4)]))]))])])
---
testcase331:Program([ClassDecl(Id(test),[MethodDecl(Id(main),Instance,[],VoidType,Block([VarDecl(Id(s),ClassType(Id(Shape)),NewExpr(Id(Shape),[IntLit(5),IntLit(10)]))],[]))])])
---
testcase332:Program([ClassDecl(Id(test),[MethodDecl(Id(main),Instance,[],VoidType,Block([],[AssignStmt(FieldAccess(Self(),Id(aPI)),FloatLit(3.14)),AssignStmt(Id(value),CallExpr(Id(x),Id(foo),[IntLit(5)])),AssignStmt(ArrayCell(Id(l),IntLit(3)),BinaryOp(*,Id(value),IntLit(2)))]))])])
---
testcase333:Program([ClassDecl(Id(test),[MethodDecl(Id(main),Instance,[],VoidType,Block([VarDecl(Id(r),FloatType),VarDecl(Id(s),FloatType),VarDecl(Id(a),ArrayType(5,IntType)),VarDecl(Id(b),ArrayType(5,IntType))],[AssignStmt(Id(r),FloatLit(2.0)),AssignStmt(Id(s),BinaryOp(*,BinaryOp(*,Id(r),Id(r)),FieldAccess(Self(),Id(myPI)))),AssignStmt(ArrayCell(Id(a),IntLit(0)),Id(s))]))])])
---
testcase334:Program([ClassDecl(Id(testForLoop),[MethodDecl(Id(main),Instance,[],VoidType,Block([],[For(Id(i),IntLit(1),IntLit(100),True,Block([],[Call(Id(io),Id(writeIntLn),[Id(i)]),AssignStmt(ArrayCell(Id(Intarray),Id(i)),BinaryOp(+,Id(i),IntLit(1)))])]),For(Id(x),IntLit(5),IntLit(2),False,Call(Id(io),Id(writeIntLn),[Id(x)])])]))])])
---
testcase335:Program([ClassDecl(Id(testBrS),[MethodDecl(Id(main),Instance,[],VoidType,Block([],[Break]))])])
---
testcase336:Program([ClassDecl(Id(testConS),[MethodDecl(Id(main),Instance,[],VoidType,Block([],[Continue]))])])
---
testcase337:Program([ClassDecl(Id(fac),[MethodDecl(Id(factorial),Instance,[param(Id(n),IntType)],IntType,Block([],[If(BinaryOp(==,Id(n),IntLit(0)),Return(IntLit(1)),Return(BinaryOp(*,Id(n),CallExpr(Self(),Id(factorial),[BinaryOp(-,Id(n),IntLit(1))]))))])),MethodDecl(Id(main),Instance,[],VoidType,Block([VarDecl(Id(x),IntType)],[AssignStmt(Id(x),CallExpr(Id(io),Id(readInt),[])),Call(Id(io),Id(writeIntLn),[CallExpr(Self(),Id(factorial),[Id(x)])])]))])])
---
testcase338:Program([ClassDecl(Id(decl),[AttributeDecl(Instance,VarDecl(Id(a),IntType)),AttributeDecl(Instance,VarDecl(Id(b),IntType)),AttributeDecl(Instance,VarDecl(Id(c),IntType)),AttributeDecl(Instance,VarDecl(Id(x),FloatType)),AttributeDecl(Instance,VarDecl(Id(y),FloatType)),AttributeDecl(Instance,VarDecl(Id(z),StringType,StringLit(abc))),AttributeDecl(Static,VarDecl(Id(d),BoolType,BooleanLit(True)))])])
---
testcase339:Program([ClassDecl(Id(test),[AttributeDecl(Instance,VarDecl(Id(a),IntType)),AttributeDecl(Instance,VarDecl(Id(b),FloatType)),AttributeDecl(Instance,VarDecl(Id(z),StringType)),MethodDecl(Id(nml),Instance,[],FloatType,Block([],[For(Id(i),Id(a),Id(b),True,Call(Self(),Id(hahaha),[])]),For(Id(i),IntLit(4),UnaryOp(-,IntLit(5)),False,AssignStmt(Id(h),IntLit(6))]),Return(IntLit(1))]))])])
---
testcase340:Program([ClassDecl(Id(testPrecedence),[MethodDecl(Id(foo),Instance,[],IntType,Block([],[AssignStmt(ArrayCell(Id(a),BinaryOp(-,BinaryOp(*,BinaryOp(&&,BinaryOp(&&,BinaryOp(-,BinaryOp(+,IntLit(1),BinaryOp(*,IntLit(2),IntLit(3))),BinaryOp(/,IntLit(4),IntLit(5))),IntLit(6)),UnaryOp(-,IntLit(7))),BinaryOp(+,BinaryOp(+,IntLit(1),IntLit(2)),IntLit(3))),BinaryOp(&&,BinaryOp(+,IntLit(4),BinaryOp(/,BinaryOp(*,IntLit(5),IntLit(6)),Id(abc))),IntLit(123)))),ArrayCell(Id(a),UnaryOp(-,IntLit(5))))]))])])
---
testcase341:Program([ClassDecl(Id(testPrecedence),[MethodDecl(Id(foo),Instance,[],IntType,Block([],[AssignStmt(ArrayCell(Id(a),BinaryOp(-,BinaryOp(*,BinaryOp(||,BinaryOp(&&,BinaryOp(-,BinaryOp(+,IntLit(1),BinaryOp(*,IntLit(2),IntLit(3))),BinaryOp(/,IntLit(4),IntLit(5))),IntLit(6)),IntLit(7)),BinaryOp(+,BinaryOp(+,IntLit(1),IntLit(2)),IntLit(3))),BinaryOp(&&,BinaryOp(+,IntLit(4),BinaryOp(/,BinaryOp(*,IntLit(5),IntLit(6)),Id(abc))),UnaryOp(!,IntLit(123))))),ArrayCell(Id(a),UnaryOp(-,IntLit(5))))]))])])
---
testcase342:Program([ClassDecl(Id(testFor),[MethodDecl(Id(foo),Instance,[],IntType,Block([],[For(Id(i),IntLit(1),BinaryOp(+,BinaryOp(-,BinaryOp(+,IntLit(10),IntLit(5)),BinaryOp(*,IntLit(4),Id(e))),Id(x)),True,Break])]))])])
---
testcase343:Program([ClassDecl(Id(String1),[AttributeDecl(Instance,VarDecl(Id(a),StringType,StringLit(chacachien))),MethodDecl(Id(getString),Instance,[],StringType,Block([],[Return(FieldAccess(Self(),Id(a)))]))]),ClassDecl(Id(String2),[AttributeDecl(Instance,VarDecl(Id(b),StringType,StringLit(NguyenPhat))),MethodDecl(Id(getString),Instance,[],StringType,Block([],[Return(FieldAccess(Self(),Id(b)))]))]),ClassDecl(Id(Example),[MethodDecl(Id(main),Instance,[],VoidType,Block([VarDecl(Id(str1),ClassType(Id(String1))),VarDecl(Id(str2),ClassType(Id(String2))),VarDecl(Id(result),StringType)],[AssignStmt(Id(result),BinaryOp(^,FieldAccess(Id(str1),Id(getString)),FieldAccess(Id(str2),Id(getString))))]))])])
---
testcase344:Program([ClassDecl(Id(Animal),[MethodDecl(Id(move),Instance,[],VoidType,Block([],[])),MethodDecl(Id(eat),Instance,[],VoidType,Block([],[])),MethodDecl(Id(label),Instance,[],VoidType,Block([],[Call(FieldAccess(Id(System),Id(out)),Id(println),[StringLit(Animal's data:)])]))]),ClassDecl(Id(Bird),Id(Animal),[MethodDecl(Id(move),Instance,[],VoidType,Block([],[Call(FieldAccess(Id(System),Id(out)),Id(println),[StringLit(Moves by flying.)])])),MethodDecl(Id(eat),Instance,[],VoidType,Block([],[Call(FieldAccess(Id(System),Id(out)),Id(println),[StringLit(Eats birdfood.)])]))]),ClassDecl(Id(Fish),Id(Animal),[MethodDecl(Id(move),Instance,[],VoidType,Block([],[Call(FieldAccess(Id(System),Id(out)),Id(println),[StringLit(Moves by swimming.)])])),MethodDecl(Id(eat),Instance,[],VoidType,Block([],[Call(FieldAccess(Id(System),Id(out)),Id(println),[StringLit(Eats seafood.)])]))]),ClassDecl(Id(TestBird),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(myBird),ClassType(Id(Animal)))],[AssignStmt(Id(myBird),NewExpr(Id(Bird),[])),Call(Id(myBird),Id(label),[]),Call(Id(myBird),Id(move),[]),Call(Id(myBird),Id(eat),[])]))]),ClassDecl(Id(TestFish),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(myFish),ClassType(Id(Animal)))],[AssignStmt(Id(myFish),NewExpr(Id(Fish),[])),Call(Id(myFish),Id(label),[]),Call(Id(myFish),Id(move),[]),Call(Id(myFish),Id(eat),[])]))])])
---
testcase345:Program([ClassDecl(Id(testArray),[MethodDecl(Id(foo),Instance,[],IntType,Block([VarDecl(Id(a),ArrayType(3,IntType),[FloatLit(5.1),FloatLit(6.2),BooleanLit(True)])],[]))])])
---
testcase346:Program([ClassDecl(Id(a),Id(b),[AttributeDecl(Instance,VarDecl(Id(c),IntType,BinaryOp(\,BinaryOp(/,FieldAccess(FieldAccess(FieldAccess(CallExpr(FieldAccess(CallExpr(Self(),Id(ok),[]),Id(not_ok)),Id(very_ok),[]),Id(pho)),Id(rose)),Id(uu)),IntLit(2)),IntLit(5))))])])
---
testcase347:Program([ClassDecl(Id(Shape),[AttributeDecl(Static,ConstDecl(Id(numOfShape),IntType,IntLit(0))),AttributeDecl(Instance,ConstDecl(Id(immuAttribute),IntType,IntLit(0))),AttributeDecl(Instance,VarDecl(Id(length),FloatType)),AttributeDecl(Instance,VarDecl(Id(width),FloatType)),MethodDecl(Id(getNumOfShape),Static,[],IntType,Block([],[Return(Id(numOfShape))]))])])
---
testcase348:Program([ClassDecl(Id(a),Id(b),[AttributeDecl(Instance,ConstDecl(Id(c),IntType,BinaryOp(!=,Id(da),IntLit(5)))),AttributeDecl(Instance,VarDecl(Id(cactus),IntType)),MethodDecl(Id(kori),Instance,[],VoidType,Block([VarDecl(Id(x),IntType),ConstDecl(Id(x),FloatType,FloatLit(1.224))],[AssignStmt(Id(b),CallExpr(Self(),Id(call),[Id(leftRecursive),Id(rightRecursive)]))])),MethodDecl(Id(main),Instance,[],VoidType,Block([],[For(Id(x),IntLit(1),UnaryOp(-,IntLit(1)),False,Block([],[AssignStmt(Id(x),BinaryOp(+,Id(x),IntLit(5)))])])]))])])
---
testcase349:Program([ClassDecl(Id(Understandable),Id(GoodBoy),[MethodDecl(Id(Void),Instance,[],VoidType,Block([],[]))])])
---
testcase350:Program([ClassDecl(Id(Point),[AttributeDecl(Instance,VarDecl(Id(x),IntType)),AttributeDecl(Instance,VarDecl(Id(y),IntType)),MethodDecl(Id(length),Static,[param(Id(a),ClassType(Id(Point))),param(Id(b),ClassType(Id(Point)))],FloatType,Block([],[Return(CallExpr(Id(Math),Id(sqrt),[BinaryOp(-,CallExpr(Id(Math),Id(sqr),[BinaryOp(-,FieldAccess(Id(a),Id(x)),FieldAccess(Id(b),Id(x)))]),BinaryOp(-,FieldAccess(Id(a),Id(y)),FieldAccess(Id(b),Id(y))))]))]))]),ClassDecl(Id(Triangle),[AttributeDecl(Instance,VarDecl(Id(point1),ClassType(Id(Point)))),AttributeDecl(Instance,VarDecl(Id(point2),ClassType(Id(Point)))),AttributeDecl(Instance,VarDecl(Id(point3),ClassType(Id(Point)))),AttributeDecl(Instance,VarDecl(Id(edge1),FloatType)),AttributeDecl(Instance,VarDecl(Id(edge2),FloatType)),AttributeDecl(Instance,VarDecl(Id(edge3),FloatType)),MethodDecl(Id(Triangle),Instance,[param(Id(p1),ClassType(Id(Point))),param(Id(p2),ClassType(Id(Point))),param(Id(p3),ClassType(Id(Point)))],Block([],[AssignStmt(FieldAccess(Self(),Id(point1)),Id(p1)),AssignStmt(FieldAccess(Self(),Id(point2)),Id(p2)),AssignStmt(FieldAccess(Self(),Id(point3)),Id(p3)),AssignStmt(FieldAccess(Self(),Id(edge1)),CallExpr(Id(Point),Id(length),[Id(p1),Id(p2)])),AssignStmt(FieldAccess(Self(),Id(edge2)),CallExpr(Id(Point),Id(length),[Id(p2),Id(p3)])),AssignStmt(FieldAccess(Self(),Id(edge3)),CallExpr(Id(Point),Id(length),[Id(p3),Id(p1)]))])),MethodDecl(Id(circumference),Instance,[],FloatType,Block([],[Return(BinaryOp(/,BinaryOp(+,BinaryOp(+,FieldAccess(Self(),Id(edge1)),FieldAccess(Self(),Id(edge2))),FieldAccess(Self(),Id(edge3))),IntLit(2)))])),MethodDecl(Id(area),Instance,[],FloatType,Block([VarDecl(Id(p),FloatType)],[AssignStmt(Id(p),CallExpr(Self(),Id(circumference),[])),Return(CallExpr(Id(Math),Id(sqrt),[BinaryOp(*,BinaryOp(*,BinaryOp(*,Id(p),BinaryOp(-,Id(p),FieldAccess(Self(),Id(edge1)))),BinaryOp(-,Id(p),FieldAccess(Self(),Id(edge2)))),BinaryOp(-,Id(p),FieldAccess(Self(),Id(edge3))))]))]))]),ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(p1),ClassType(Id(Point))),VarDecl(Id(p2),ClassType(Id(Point))),VarDecl(Id(p3),ClassType(Id(Point))),VarDecl(Id(abc),ClassType(Id(Triangle))),VarDecl(Id(area),FloatType)],[AssignStmt(Id(p1),NewExpr(Id(Point),[IntLit(0),IntLit(0)])),AssignStmt(Id(p2),NewExpr(Id(Point),[IntLit(0),IntLit(1)])),AssignStmt(Id(p3),NewExpr(Id(Point),[IntLit(1),IntLit(0)])),AssignStmt(Id(abc),NewExpr(Id(Triangle),[Id(p1),Id(p2),Id(p3)])),AssignStmt(Id(area),CallExpr(Id(abc),Id(area),[])),Call(Id(io),Id(writeLn),[StringLit(Area of triangle: ),Id(area)])]))])])
---
testcase351:Program([ClassDecl(Id(scope),[MethodDecl(Id(x),Instance,[],IntType,Block([VarDecl(Id(x),IntType)],[Block([VarDecl(Id(x),IntType,IntLit(10))],[Block([ConstDecl(Id(x),IntType,IntLit(10))],[Block([ConstDecl(Id(x),FloatType,FloatLit(0.0))],[])])])]))])])
---
testcase352:Program([ClassDecl(Id(a),Id(b),[MethodDecl(Id(a),Instance,[],Block([],[])),MethodDecl(Id(count),Instance,[param(Id(a),IntType),param(Id(b),ClassType(Id(Shape))),param(Id(c),StringType),param(Id(d),StringType),param(Id(e),StringType)],IntType,Block([],[])),MethodDecl(Id(getFloatArray),Instance,[],ArrayType(5,FloatType),Block([],[])),MethodDecl(Id(main),Instance,[],VoidType,Block([],[AssignStmt(Id(a),IntLit(2)),AssignStmt(FieldAccess(Id(a),Id(b)),IntLit(5)),For(Id(x),IntLit(5),IntLit(10),True,AssignStmt(Id(x),BinaryOp(+,Id(x),IntLit(5)))])])),MethodDecl(Id(okay),Instance,[],IntType,Block([],[AssignStmt(Id(a),IntLit(2)),AssignStmt(FieldAccess(Id(a),Id(b)),IntLit(5)),For(Id(x),IntLit(5),IntLit(10),True,Block([],[Break,Continue,Return(BinaryOp(==,Id(x),Id(y)))])])]))])])
---
testcase353:Program([ClassDecl(Id(Rectangle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[If(BinaryOp(==,BinaryOp(+,Id(a),Id(b)),IntLit(5)),AssignStmt(Id(a),Id(b))),Continue]))])])
---
testcase354:Program([ClassDecl(Id(a),Id(b),[AttributeDecl(Instance,ConstDecl(Id(c),IntType,BinaryOp(!=,Id(daaaaaa),IntLit(5)))),AttributeDecl(Instance,VarDecl(Id(cactus),IntType)),MethodDecl(Id(kori),Instance,[],VoidType,Block([VarDecl(Id(x),IntType),ConstDecl(Id(x),FloatType,FloatLit(1.224))],[AssignStmt(Id(b),CallExpr(Self(),Id(call),[Id(leftRecursive),Id(rightRecursive)]))])),MethodDecl(Id(main),Static,[],VoidType,Block([],[For(Id(x),IntLit(1),UnaryOp(-,IntLit(1)),False,Block([],[AssignStmt(Id(x),BinaryOp(+,Id(x),IntLit(5)))])])]))])])
---
testcase355:Program([ClassDecl(Id(Point),[AttributeDecl(Instance,VarDecl(Id(x),IntType)),AttributeDecl(Instance,VarDecl(Id(y),IntType)),MethodDecl(Id(length),Static,[param(Id(a),ClassType(Id(Point))),param(Id(b),ClassType(Id(Point)))],FloatType,Block([],[Return(CallExpr(Id(Math),Id(sqrt),[BinaryOp(-,CallExpr(Id(Math),Id(sqr),[BinaryOp(-,FieldAccess(Id(a),Id(x)),FieldAccess(Id(b),Id(x)))]),BinaryOp(-,FieldAccess(Id(a),Id(y)),FieldAccess(Id(b),Id(y))))]))]))])])
---
testcase356:Program([ClassDecl(Id(Triangle),[AttributeDecl(Instance,VarDecl(Id(point1),ClassType(Id(Point)))),AttributeDecl(Instance,VarDecl(Id(point2),ClassType(Id(Point)))),AttributeDecl(Instance,VarDecl(Id(point3),ClassType(Id(Point)))),AttributeDecl(Instance,VarDecl(Id(edge1),FloatType)),AttributeDecl(Instance,VarDecl(Id(edge2),FloatType)),AttributeDecl(Instance,VarDecl(Id(edge3),FloatType)),MethodDecl(Id(Triangle),Instance,[param(Id(p1),ClassType(Id(Point))),param(Id(p2),ClassType(Id(Point))),param(Id(p3),ClassType(Id(Point)))],Block([],[AssignStmt(FieldAccess(Self(),Id(point1)),Id(p1)),AssignStmt(FieldAccess(Self(),Id(point2)),Id(p2)),AssignStmt(FieldAccess(Self(),Id(point3)),Id(p3)),AssignStmt(FieldAccess(Self(),Id(edge1)),CallExpr(Id(Point),Id(length),[Id(p1),Id(p2)])),AssignStmt(FieldAccess(Self(),Id(edge2)),CallExpr(Id(Point),Id(length),[Id(p2),Id(p3)])),AssignStmt(FieldAccess(Self(),Id(edge3)),CallExpr(Id(Point),Id(length),[Id(p3),Id(p1)]))])),MethodDecl(Id(circumference),Instance,[],FloatType,Block([],[Return(BinaryOp(/,BinaryOp(+,BinaryOp(+,FieldAccess(Self(),Id(edge1)),FieldAccess(Self(),Id(edge2))),FieldAccess(Self(),Id(edge3))),IntLit(2)))])),MethodDecl(Id(area),Instance,[],FloatType,Block([VarDecl(Id(p),FloatType)],[AssignStmt(Id(p),CallExpr(Self(),Id(circumference),[])),Return(CallExpr(Id(Math),Id(sqrt),[BinaryOp(*,BinaryOp(*,BinaryOp(*,Id(p),BinaryOp(-,Id(p),FieldAccess(Self(),Id(edge1)))),BinaryOp(-,Id(p),FieldAccess(Self(),Id(edge2)))),BinaryOp(-,Id(p),FieldAccess(Self(),Id(edge3))))]))]))]),ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(p1),ClassType(Id(Point))),VarDecl(Id(p2),ClassType(Id(Point))),VarDecl(Id(p3),ClassType(Id(Point))),VarDecl(Id(abc),ClassType(Id(Triangle))),VarDecl(Id(area),FloatType)],[AssignStmt(Id(p1),NewExpr(Id(Point),[IntLit(0),IntLit(0)])),AssignStmt(Id(p2),NewExpr(Id(Point),[IntLit(0),IntLit(1)])),AssignStmt(Id(p3),NewExpr(Id(Point),[IntLit(1),IntLit(0)])),AssignStmt(Id(abc),NewExpr(Id(Triangle),[Id(p1),Id(p2),Id(p3)])),AssignStmt(Id(area),CallExpr(Id(abc),Id(area),[])),Call(Id(io),Id(writeLn),[StringLit(Area of triangle: ),Id(area)])]))])])
---
testcase357:Program([ClassDecl(Id(test),[MethodDecl(Id(foo),Instance,[],IntType,Block([],[AssignStmt(Id(a),BinaryOp(||,BinaryOp(&&,BinaryOp(/,BinaryOp(*,BinaryOp(/,Id(b),IntLit(2)),Id(n)),IntLit(4)),BinaryOp(%,IntLit(5),Id(g))),BinaryOp(%,BinaryOp(/,BinaryOp(*,IntLit(2),IntLit(9)),IntLit(4)),IntLit(2))))]))])])
---
testcase358:Program([ClassDecl(Id(test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(Kori),ArrayType(5,IntType),[IntLit(1),IntLit(2),IntLit(3),IntLit(4),IntLit(5)])],[AssignStmt(ArrayCell(Id(Kori),IntLit(5)),IntLit(7)),Call(Self(),Id(print),[Id(Kori),IntLit(0),IntLit(4)])]))])])
---
testcase359:Program([ClassDecl(Id(a),Id(b),[AttributeDecl(Static,VarDecl(Id(a),IntType)),AttributeDecl(Static,VarDecl(Id(b),IntType,IntLit(5))),AttributeDecl(Static,VarDecl(Id(c),IntType,IntLit(66))),AttributeDecl(Static,VarDecl(Id(d),IntType)),AttributeDecl(Static,VarDecl(Id(e),IntType)),AttributeDecl(Static,VarDecl(Id(f),IntType,IntLit(77))),AttributeDecl(Static,VarDecl(Id(g),IntType,IntLit(8))),AttributeDecl(Static,ConstDecl(Id(a),IntType,IntLit(1))),AttributeDecl(Static,ConstDecl(Id(b),IntType,IntLit(2))),AttributeDecl(Static,ConstDecl(Id(c),IntType,IntLit(3)))])])
---
testcase360:Program([ClassDecl(Id(Employee),[AttributeDecl(Instance,VarDecl(Id(name),StringType)),AttributeDecl(Instance,VarDecl(Id(age),IntType)),MethodDecl(Id(Employee),Instance,[param(Id(n),StringType),param(Id(a),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(name)),Id(n)),AssignStmt(FieldAccess(Self(),Id(age)),Id(a))])),MethodDecl(Id(display),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Employee Name: ),FieldAccess(Self(),Id(name)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Employee Age: ),FieldAccess(Self(),Id(age)))])]))])])
---
testcase361:Program([ClassDecl(Id(Manager),Id(Employee),[AttributeDecl(Instance,VarDecl(Id(department),StringType)),MethodDecl(Id(Manager),Instance,[param(Id(n),StringType),param(Id(a),IntType),param(Id(dept),StringType)],Block([],[Call(Self(),Id(Employee),[Id(n),Id(a)]),AssignStmt(FieldAccess(Self(),Id(department)),Id(dept))])),MethodDecl(Id(display),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Manager Name: ),FieldAccess(Self(),Id(name)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Manager Age: ),FieldAccess(Self(),Id(age)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Manager Department: ),FieldAccess(Self(),Id(department)))])]))])])
---
testcase362:Program([ClassDecl(Id(Developer),Id(Employee),[AttributeDecl(Instance,VarDecl(Id(programmingLanguage),StringType)),MethodDecl(Id(Developer),Instance,[param(Id(n),StringType),param(Id(a),IntType),param(Id(lang),StringType)],Block([],[Call(Self(),Id(Employee),[Id(n),Id(a)]),AssignStmt(FieldAccess(Self(),Id(programmingLanguage)),Id(lang))])),MethodDecl(Id(display),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Developer Name: ),FieldAccess(Self(),Id(name)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Developer Age: ),FieldAccess(Self(),Id(age)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Programming Language: ),FieldAccess(Self(),Id(programmingLanguage)))])]))])])
---
testcase363:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(emp),ClassType(Id(Employee)),NewExpr(Id(Employee),[StringLit(John Doe),IntLit(30)])),VarDecl(Id(manager),ClassType(Id(Manager)),NewExpr(Id(Manager),[StringLit(Alice Smith),IntLit(40),StringLit(HR)])),VarDecl(Id(developer),ClassType(Id(Developer)),NewExpr(Id(Developer),[StringLit(Bob Johnson),IntLit(25),StringLit(Java)])),VarDecl(Id(e1),ClassType(Id(Employee)),Id(manager)),VarDecl(Id(e2),ClassType(Id(Employee)),Id(developer))],[Call(Id(emp),Id(display),[]),Call(Id(e1),Id(display),[]),Call(Id(e2),Id(display),[])]))])])
---
testcase364:Program([ClassDecl(Id(test),[MethodDecl(Id(foo),Instance,[param(Id(a),IntType),param(Id(b),IntType),param(Id(c),FloatType)],VoidType,Block([VarDecl(Id(_str_),StringType),VarDecl(Id(o),StringType),VarDecl(Id(c),StringType)],[]))])])
---
testcase365:Program([ClassDecl(Id(test),[MethodDecl(Id(main),Static,[],VoidType,Block([],[AssignStmt(Id(a),UnaryOp(+,Id(a)))]))])])
---
testcase366:Program([ClassDecl(Id(ABC),[])])
---
testcase367:Program([ClassDecl(Id(PPL),[AttributeDecl(Instance,VarDecl(Id(PPL),StringType,StringLit(Principles of Programming Languages))),AttributeDecl(Instance,VarDecl(Id(lecturer),StringType,StringLit(Dr. Nguyen Hua Phung))),MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(con),StringType)],[AssignStmt(Id(con),BinaryOp(^,Id(lecturer),StringLit( - )))]))])])
---
testcase368:Program([ClassDecl(Id(test),[MethodDecl(Id(foo),Instance,[],IntType,Block([],[AssignStmt(ArrayCell(Id(a),BinaryOp(-,BinaryOp(*,BinaryOp(||,BinaryOp(&&,BinaryOp(-,BinaryOp(+,IntLit(1),BinaryOp(*,IntLit(2),IntLit(3))),BinaryOp(/,IntLit(4),IntLit(5))),IntLit(6)),IntLit(7)),BinaryOp(+,BinaryOp(+,IntLit(1),IntLit(2)),IntLit(3))),BinaryOp(&&,BinaryOp(+,IntLit(4),BinaryOp(/,BinaryOp(*,IntLit(5),IntLit(6)),Id(abc))),UnaryOp(!,IntLit(123))))),ArrayCell(Id(a),UnaryOp(-,IntLit(5))))]))])])
---
testcase369:Program([ClassDecl(Id(main),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[AssignStmt(ArrayCell(Id(a),BinaryOp(+,IntLit(3),CallExpr(Id(x),Id(foo),[IntLit(2)]))),BinaryOp(+,ArrayCell(Id(a),ArrayCell(Id(b),IntLit(2))),IntLit(3))),Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))]))])])
---
testcase370:Program([ClassDecl(Id(main),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[AssignStmt(ArrayCell(FieldAccess(Id(x),Id(b)),IntLit(2)),ArrayCell(CallExpr(Id(x),Id(m),[]),IntLit(3))),Block([VarDecl(Id(r),FloatType),VarDecl(Id(s),FloatType),VarDecl(Id(a),ArrayType(5,IntType)),VarDecl(Id(b),ArrayType(5,IntType))],[AssignStmt(Id(r),FloatLit(2.0)),AssignStmt(Id(s),BinaryOp(*,BinaryOp(*,Id(r),Id(r)),FieldAccess(Self(),Id(myPI)))),AssignStmt(ArrayCell(Id(a),IntLit(0)),Id(s))]),Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))]))])])
---
testcase371:Program([ClassDecl(Id(a),[]),ClassDecl(Id(b),[MethodDecl(Id(bb),Instance,[],ClassType(Id(a)),Block([],[Continue,AssignStmt(ArrayCell(FieldAccess(Id(xxx),Id(xxx)),IntLit(2)),ArrayCell(CallExpr(Id(aaa),Id(aaa),[Id(a)]),Id(aaa)))]))])])
---
testcase372:Program([ClassDecl(Id(Vehicle),[MethodDecl(Id(move),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Vehicle is moving.)])]))])])
---
testcase373:Program([ClassDecl(Id(Car),Id(Vehicle),[MethodDecl(Id(move),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Car is driving on the road.)])]))])])
---
testcase374:Program([ClassDecl(Id(Bicycle),Id(Vehicle),[MethodDecl(Id(move),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Bicycle is pedaling on the path.)])]))])])
---
testcase375:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(vehicles),ArrayType(5,ClassType(Id(Vehicle))))],[AssignStmt(ArrayCell(Id(vehicles),IntLit(0)),NewExpr(Id(Vehicle),[])),AssignStmt(ArrayCell(Id(vehicles),IntLit(1)),NewExpr(Id(Car),[])),AssignStmt(ArrayCell(Id(vehicles),IntLit(2)),NewExpr(Id(Bicycle),[])),For(Id(v),IntLit(0),Id(vehicles),True,Block([],[Call(Id(v),Id(move),[])])])]))])])
---
testcase376:Program([ClassDecl(Id(Vehicle),[MethodDecl(Id(move),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Vehicle is moving.)])]))]),ClassDecl(Id(Car),Id(Vehicle),[MethodDecl(Id(move),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Car is driving on the road.)])]))]),ClassDecl(Id(Bicycle),Id(Vehicle),[MethodDecl(Id(move),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Bicycle is pedaling on the path.)])]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(vehicles),ArrayType(5,ClassType(Id(Vehicle))))],[AssignStmt(ArrayCell(Id(vehicles),IntLit(0)),NewExpr(Id(Vehicle),[])),AssignStmt(ArrayCell(Id(vehicles),IntLit(1)),NewExpr(Id(Car),[])),AssignStmt(ArrayCell(Id(vehicles),IntLit(2)),NewExpr(Id(Bicycle),[])),For(Id(v),IntLit(0),Id(vehicles),True,Block([],[Call(Id(v),Id(move),[])])])]))])])
---
testcase377:Program([ClassDecl(Id(Character),[AttributeDecl(Instance,VarDecl(Id(name),StringType)),AttributeDecl(Instance,VarDecl(Id(level),IntType)),MethodDecl(Id(Character),Instance,[param(Id(n),StringType),param(Id(l),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(name)),Id(n)),AssignStmt(FieldAccess(Self(),Id(level)),Id(l))])),MethodDecl(Id(displayInfo),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Name: ),FieldAccess(Self(),Id(name)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Level: ),FieldAccess(Self(),Id(level)))])]))])])
---
testcase378:Program([ClassDecl(Id(Warrior),Id(Character),[AttributeDecl(Instance,VarDecl(Id(weapon),StringType)),MethodDecl(Id(Warrior),Instance,[param(Id(n),StringType),param(Id(l),IntType),param(Id(w),IntType)],Block([],[Call(Self(),Id(Character),[Id(n),Id(l)]),AssignStmt(FieldAccess(Self(),Id(weapon)),Id(w))])),MethodDecl(Id(displayInfo),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Warrior:)]),Call(FieldAccess(Self(),Id(Character)),Id(displayInfo),[]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Weapon: ),FieldAccess(Self(),Id(weapon)))])]))])])
---
testcase379:Program([ClassDecl(Id(Mage),Id(Character),[AttributeDecl(Instance,VarDecl(Id(spell),StringType)),MethodDecl(Id(Mage),Instance,[param(Id(n),StringType),param(Id(l),IntType),param(Id(s),IntType)],Block([],[Call(Self(),Id(Character),[Id(n),Id(l)]),AssignStmt(FieldAccess(Self(),Id(spell)),Id(s))])),MethodDecl(Id(displayInfo),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Mage:)]),Call(FieldAccess(Self(),Id(Character)),Id(displayInfo),[]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Spell: ),FieldAccess(Self(),Id(spell)))])]))])])
---
testcase380:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(warrior),ClassType(Id(Warrior)),NewExpr(Id(Warrior),[StringLit(Conan),IntLit(25),StringLit(Greatsword)])),VarDecl(Id(mage),ClassType(Id(Mage)),NewExpr(Id(Mage),[StringLit(Gandalf),IntLit(30),StringLit(Fireball)])),VarDecl(Id(characters),ArrayType(2,ClassType(Id(Character))))],[AssignStmt(ArrayCell(Id(characters),IntLit(0)),Id(warrior)),AssignStmt(ArrayCell(Id(characters),IntLit(1)),Id(mage)),For(Id(c),Id(lemgth),Id(characters),False,Block([],[Call(Id(c),Id(displayInfo),[]),Call(Id(io),Id(writeStrLn),[])])])]))])])
---
testcase381:Program([ClassDecl(Id(Character),[AttributeDecl(Instance,VarDecl(Id(name),StringType)),AttributeDecl(Instance,VarDecl(Id(level),IntType)),MethodDecl(Id(Character),Instance,[param(Id(n),StringType),param(Id(l),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(name)),Id(n)),AssignStmt(FieldAccess(Self(),Id(level)),Id(l))])),MethodDecl(Id(displayInfo),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Name: ),FieldAccess(Self(),Id(name)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Level: ),FieldAccess(Self(),Id(level)))])]))]),ClassDecl(Id(Warrior),Id(Character),[AttributeDecl(Instance,VarDecl(Id(weapon),StringType)),MethodDecl(Id(Warrior),Instance,[param(Id(n),StringType),param(Id(l),IntType),param(Id(w),IntType)],Block([],[Call(Self(),Id(Character),[Id(n),Id(l)]),AssignStmt(FieldAccess(Self(),Id(weapon)),Id(w))])),MethodDecl(Id(displayInfo),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Warrior:)]),Call(FieldAccess(Self(),Id(Character)),Id(displayInfo),[]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Weapon: ),FieldAccess(Self(),Id(weapon)))])]))]),ClassDecl(Id(Mage),Id(Character),[AttributeDecl(Instance,VarDecl(Id(spell),StringType)),MethodDecl(Id(Mage),Instance,[param(Id(n),StringType),param(Id(l),IntType),param(Id(s),IntType)],Block([],[Call(Self(),Id(Character),[Id(n),Id(l)]),AssignStmt(FieldAccess(Self(),Id(spell)),Id(s))])),MethodDecl(Id(displayInfo),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Mage:)]),Call(FieldAccess(Self(),Id(Character)),Id(displayInfo),[]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Spell: ),FieldAccess(Self(),Id(spell)))])]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(warrior),ClassType(Id(Warrior)),NewExpr(Id(Warrior),[StringLit(Conan),IntLit(25),StringLit(Greatsword)])),VarDecl(Id(mage),ClassType(Id(Mage)),NewExpr(Id(Mage),[StringLit(Gandalf),IntLit(30),StringLit(Fireball)])),VarDecl(Id(characters),ArrayType(2,ClassType(Id(Character))))],[AssignStmt(ArrayCell(Id(characters),IntLit(0)),Id(warrior)),AssignStmt(ArrayCell(Id(characters),IntLit(1)),Id(mage)),For(Id(c),IntLit(0),Id(characters),True,Block([],[Call(Id(c),Id(displayInfo),[]),Call(Id(io),Id(writeStrLn),[])])])]))])])
---
testcase382:Program([ClassDecl(Id(MergeSort),[MethodDecl(Id(merge),Instance,[param(Id(left),IntType),param(Id(middle),IntType),param(Id(right),IntType)],VoidType,Block([VarDecl(Id(n1),IntType,BinaryOp(+,BinaryOp(-,Id(middle),Id(left)),IntLit(1))),VarDecl(Id(n2),IntType,BinaryOp(-,Id(right),Id(middle))),VarDecl(Id(leftArray),ArrayType(0,IntType)),VarDecl(Id(rightArray),ArrayType(0,IntType))],[For(Id(i),IntLit(0),BinaryOp(-,Id(n1),IntLit(1)),True,AssignStmt(ArrayCell(Id(leftArray),Id(i)),ArrayCell(Id(arr),BinaryOp(+,Id(left),Id(i))))]),For(Id(j),IntLit(0),BinaryOp(-,Id(n2),IntLit(1)),True,AssignStmt(ArrayCell(Id(rightArray),Id(j)),ArrayCell(Id(arr),BinaryOp(+,BinaryOp(+,Id(middle),IntLit(1)),Id(j))))]),AssignStmt(Id(i),IntLit(0)),AssignStmt(Id(j),IntLit(0)),AssignStmt(Id(k),Id(left)),For(Id(k),Id(left),Id(right),True,Block([],[If(BinaryOp(<,Id(i),BinaryOp(&&,Id(n1),BinaryOp(||,BinaryOp(>=,Id(j),Id(n2)),BinaryOp(<=,ArrayCell(Id(leftArray),Id(i)),ArrayCell(Id(rightArray),Id(j)))))),Block([],[AssignStmt(ArrayCell(Id(arr),Id(k)),ArrayCell(Id(leftArray),Id(i))),AssignStmt(Id(i),BinaryOp(+,Id(i),IntLit(1)))]),Block([],[AssignStmt(ArrayCell(Id(arr),Id(k)),ArrayCell(Id(rightArray),Id(j))),AssignStmt(Id(j),BinaryOp(+,Id(j),IntLit(1)))]))])])])),MethodDecl(Id(mergeSort),Instance,[param(Id(left),IntType),param(Id(right),IntType)],VoidType,Block([],[If(BinaryOp(<,Id(left),Id(right)),Block([VarDecl(Id(middle),IntType,BinaryOp(+,Id(left),BinaryOp(/,BinaryOp(-,Id(right),Id(left)),IntLit(2))))],[Call(Self(),Id(mergeSort),[Id(arr),Id(left),Id(middle)]),Call(Self(),Id(mergeSort),[Id(arr),BinaryOp(+,Id(middle),IntLit(1)),Id(right)]),Call(Self(),Id(merge),[Id(arr),Id(left),Id(middle),Id(right)])]))]))])])
---
testcase383:Program([ClassDecl(Id(TestMergeSort),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(numbers),ArrayType(10,IntType),[IntLit(5),IntLit(2),IntLit(8),IntLit(1),IntLit(9),IntLit(3),IntLit(7),IntLit(4),IntLit(6),IntLit(0)]),VarDecl(Id(sorter),ClassType(Id(MergeSort)),NewExpr(Id(MergeSort),[]))],[Call(Id(sorter),Id(mergeSort),[Id(numbers),IntLit(0),BinaryOp(-,FieldAccess(Id(numbers),Id(length)),IntLit(1))]),Call(Id(io),Id(writeStrLn),[StringLit(Sorted Array:)]),For(Id(i),IntLit(0),BinaryOp(-,FieldAccess(Id(numbers),Id(length)),IntLit(1)),True,Block([],[Call(Id(io),Id(writeInt),[ArrayCell(Id(numbers),Id(i))]),Call(Id(io),Id(writeChar),[StringLit( )])])])]))])])
---
testcase384:Program([ClassDecl(Id(BubbleSort),[MethodDecl(Id(sort),Instance,[param(Id(arr),ArrayType(10,IntType))],VoidType,Block([VarDecl(Id(temp),IntType)],[For(Id(i),IntLit(0),BinaryOp(-,Id(length),IntLit(2)),True,Block([],[For(Id(j),IntLit(0),BinaryOp(-,BinaryOp(-,Id(length),IntLit(2)),Id(i)),True,Block([],[If(BinaryOp(>,ArrayCell(Id(arr),Id(j)),ArrayCell(Id(arr),BinaryOp(+,Id(j),IntLit(1)))),Block([],[AssignStmt(Id(temp),ArrayCell(Id(arr),Id(j))),AssignStmt(ArrayCell(Id(arr),Id(j)),ArrayCell(Id(arr),BinaryOp(+,Id(j),IntLit(1)))),AssignStmt(ArrayCell(Id(arr),BinaryOp(+,Id(j),IntLit(1))),Id(temp))]))])])])])])),MethodDecl(Id(printArray),Instance,[param(Id(arr),ArrayType(10,IntType))],VoidType,Block([],[For(Id(i),IntLit(0),BinaryOp(-,Id(length),IntLit(1)),True,Block([],[Call(Id(io),Id(writeInt),[ArrayCell(Id(arr),Id(i))]),Call(Id(io),Id(writeChar),[StringLit( )])])])]))])])
---
testcase385:Program([ClassDecl(Id(TestBubbleSort),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(array),ArrayType(7,IntType),[IntLit(64),IntLit(34),IntLit(25),IntLit(12),IntLit(22),IntLit(11),IntLit(90)]),VarDecl(Id(sorter),ClassType(Id(BubbleSort)),NewExpr(Id(BubbleSort),[]))],[Call(Id(io),Id(writeStrLn),[StringLit(Original array:)]),Call(Id(sorter),Id(printArray),[Id(array)]),Call(Id(io),Id(writeStrLn),[StringLit(\nSorted array:)]),Call(Id(sorter),Id(sort),[Id(array)]),Call(Id(sorter),Id(printArray),[Id(array)])]))])])
---
testcase386:Program([ClassDecl(Id(MergeSort),[MethodDecl(Id(merge),Instance,[param(Id(left),IntType),param(Id(middle),IntType),param(Id(right),IntType)],VoidType,Block([VarDecl(Id(n1),IntType,BinaryOp(+,BinaryOp(-,Id(middle),Id(left)),IntLit(1))),VarDecl(Id(n2),IntType,BinaryOp(-,Id(right),Id(middle))),VarDecl(Id(leftArray),ArrayType(0,IntType)),VarDecl(Id(rightArray),ArrayType(0,IntType))],[For(Id(i),IntLit(0),BinaryOp(-,Id(n1),IntLit(1)),True,AssignStmt(ArrayCell(Id(leftArray),Id(i)),ArrayCell(Id(arr),BinaryOp(+,Id(left),Id(i))))]),For(Id(j),IntLit(0),BinaryOp(-,Id(n2),IntLit(1)),True,AssignStmt(ArrayCell(Id(rightArray),Id(j)),ArrayCell(Id(arr),BinaryOp(+,BinaryOp(+,Id(middle),IntLit(1)),Id(j))))]),AssignStmt(Id(i),IntLit(0)),AssignStmt(Id(j),IntLit(0)),AssignStmt(Id(k),Id(left)),For(Id(k),Id(left),Id(right),True,Block([],[If(BinaryOp(<,Id(i),BinaryOp(&&,Id(n1),BinaryOp(||,BinaryOp(>=,Id(j),Id(n2)),BinaryOp(<=,ArrayCell(Id(leftArray),Id(i)),ArrayCell(Id(rightArray),Id(j)))))),Block([],[AssignStmt(ArrayCell(Id(arr),Id(k)),ArrayCell(Id(leftArray),Id(i))),AssignStmt(Id(i),BinaryOp(+,Id(i),IntLit(1)))]),Block([],[AssignStmt(ArrayCell(Id(arr),Id(k)),ArrayCell(Id(rightArray),Id(j))),AssignStmt(Id(j),BinaryOp(+,Id(j),IntLit(1)))]))])])])),MethodDecl(Id(mergeSort),Instance,[param(Id(left),IntType),param(Id(right),IntType)],VoidType,Block([],[If(BinaryOp(<,Id(left),Id(right)),Block([VarDecl(Id(middle),IntType,BinaryOp(+,Id(left),BinaryOp(/,BinaryOp(-,Id(right),Id(left)),IntLit(2))))],[Call(Self(),Id(mergeSort),[Id(arr),Id(left),Id(middle)]),Call(Self(),Id(mergeSort),[Id(arr),BinaryOp(+,Id(middle),IntLit(1)),Id(right)]),Call(Self(),Id(merge),[Id(arr),Id(left),Id(middle),Id(right)])]))]))]),ClassDecl(Id(TestMergeSort),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(numbers),ArrayType(10,IntType),[IntLit(5),IntLit(2),IntLit(8),IntLit(1),IntLit(9),IntLit(3),IntLit(7),IntLit(4),IntLit(6),IntLit(0)]),VarDecl(Id(sorter),ClassType(Id(MergeSort)),NewExpr(Id(MergeSort),[]))],[Call(Id(sorter),Id(mergeSort),[Id(numbers),IntLit(0),BinaryOp(-,FieldAccess(Id(numbers),Id(length)),IntLit(1))]),Call(Id(io),Id(writeStrLn),[StringLit(Sorted Array:)]),For(Id(i),IntLit(0),BinaryOp(-,FieldAccess(Id(numbers),Id(length)),IntLit(1)),True,Block([],[Call(Id(io),Id(writeInt),[ArrayCell(Id(numbers),Id(i))]),Call(Id(io),Id(writeChar),[StringLit( )])])])]))])])
---
testcase387:Program([ClassDecl(Id(BubbleSort),[MethodDecl(Id(sort),Instance,[param(Id(arr),ArrayType(10,IntType))],VoidType,Block([VarDecl(Id(temp),IntType)],[For(Id(i),IntLit(0),BinaryOp(-,Id(length),IntLit(2)),True,Block([],[For(Id(j),IntLit(0),BinaryOp(-,BinaryOp(-,Id(length),IntLit(2)),Id(i)),True,Block([],[If(BinaryOp(>,ArrayCell(Id(arr),Id(j)),ArrayCell(Id(arr),BinaryOp(+,Id(j),IntLit(1)))),Block([],[AssignStmt(Id(temp),ArrayCell(Id(arr),Id(j))),AssignStmt(ArrayCell(Id(arr),Id(j)),ArrayCell(Id(arr),BinaryOp(+,Id(j),IntLit(1)))),AssignStmt(ArrayCell(Id(arr),BinaryOp(+,Id(j),IntLit(1))),Id(temp))]))])])])])])),MethodDecl(Id(printArray),Instance,[param(Id(arr),ArrayType(10,IntType))],VoidType,Block([],[For(Id(i),IntLit(0),BinaryOp(-,Id(length),IntLit(1)),True,Block([],[Call(Id(io),Id(writeInt),[ArrayCell(Id(arr),Id(i))]),Call(Id(io),Id(writeChar),[StringLit( )])])])]))]),ClassDecl(Id(TestBubbleSort),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(array),ArrayType(7,IntType),[IntLit(64),IntLit(34),IntLit(25),IntLit(12),IntLit(22),IntLit(11),IntLit(90)]),VarDecl(Id(sorter),ClassType(Id(BubbleSort)),NewExpr(Id(BubbleSort),[]))],[Call(Id(io),Id(writeStrLn),[StringLit(Original array:)]),Call(Id(sorter),Id(printArray),[Id(array)]),Call(Id(io),Id(writeStrLn),[StringLit(\nSorted array:)]),Call(Id(sorter),Id(sort),[Id(array)]),Call(Id(sorter),Id(printArray),[Id(array)])]))])])
---
testcase388:Program([ClassDecl(Id(BinarySearch),[MethodDecl(Id(search),Instance,[param(Id(arr),ArrayType(10,IntType)),param(Id(target),IntType),param(Id(low),IntType),param(Id(high),IntType)],IntType,Block([VarDecl(Id(mid),IntType)],[If(BinaryOp(>,Id(low),Id(high)),Return(UnaryOp(-,IntLit(1)))),AssignStmt(Id(mid),BinaryOp(/,BinaryOp(+,Id(low),Id(high)),IntLit(2))),If(BinaryOp(==,ArrayCell(Id(arr),Id(mid)),Id(target)),Return(Id(mid)),If(BinaryOp(>,ArrayCell(Id(arr),Id(mid)),Id(target)),Return(CallExpr(Self(),Id(search),[Id(arr),Id(target),Id(low),BinaryOp(-,Id(mid),IntLit(1))])),Return(CallExpr(Self(),Id(search),[Id(arr),Id(target),BinaryOp(+,Id(mid),IntLit(1)),Id(high)]))))]))])])
---
testcase389:Program([ClassDecl(Id(TestBinarySearch),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(sortedArray),ArrayType(10,IntType),[IntLit(2),IntLit(5),IntLit(8),IntLit(12),IntLit(16),IntLit(23),IntLit(38),IntLit(56),IntLit(72),IntLit(91)]),VarDecl(Id(target),IntType,IntLit(23)),VarDecl(Id(searchAlgorithm),ClassType(Id(BinarySearch)),NewExpr(Id(BinarySearch),[])),VarDecl(Id(result),IntType,CallExpr(Id(searchAlgorithm),Id(search),[Id(sortedArray),Id(target),IntLit(0),BinaryOp(-,FieldAccess(Id(sortedArray),Id(length)),IntLit(1))]))],[If(BinaryOp(!=,Id(result),UnaryOp(-,IntLit(1))),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Element ),Id(target)),StringLit( found at index )),Id(result))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,StringLit(Element ),Id(target)),StringLit( not found in the array))]))]))])])
---
testcase390:Program([ClassDecl(Id(BinarySearch),[MethodDecl(Id(search),Instance,[param(Id(arr),ArrayType(10,IntType)),param(Id(target),IntType),param(Id(low),IntType),param(Id(high),IntType)],IntType,Block([VarDecl(Id(mid),IntType)],[If(BinaryOp(>,Id(low),Id(high)),Return(UnaryOp(-,IntLit(1)))),AssignStmt(Id(mid),BinaryOp(/,BinaryOp(+,Id(low),Id(high)),IntLit(2))),If(BinaryOp(==,ArrayCell(Id(arr),Id(mid)),Id(target)),Return(Id(mid)),If(BinaryOp(>,ArrayCell(Id(arr),Id(mid)),Id(target)),Return(CallExpr(Self(),Id(search),[Id(arr),Id(target),Id(low),BinaryOp(-,Id(mid),IntLit(1))])),Return(CallExpr(Self(),Id(search),[Id(arr),Id(target),BinaryOp(+,Id(mid),IntLit(1)),Id(high)]))))]))]),ClassDecl(Id(TestBinarySearch),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(sortedArray),ArrayType(10,IntType),[IntLit(2),IntLit(5),IntLit(8),IntLit(12),IntLit(16),IntLit(23),IntLit(38),IntLit(56),IntLit(72),IntLit(91)]),VarDecl(Id(target),IntType,IntLit(23)),VarDecl(Id(searchAlgorithm),ClassType(Id(BinarySearch)),NewExpr(Id(BinarySearch),[])),VarDecl(Id(result),IntType,CallExpr(Id(searchAlgorithm),Id(search),[Id(sortedArray),Id(target),IntLit(0),BinaryOp(-,FieldAccess(Id(sortedArray),Id(length)),IntLit(1))]))],[If(BinaryOp(!=,Id(result),UnaryOp(-,IntLit(1))),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Element ),Id(target)),StringLit( found at index )),Id(result))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,StringLit(Element ),Id(target)),StringLit( not found in the array))]))]))])])
---
testcase391:Program([ClassDecl(Id(Account),[AttributeDecl(Instance,VarDecl(Id(accountNumber),IntType)),AttributeDecl(Instance,VarDecl(Id(balance),FloatType)),MethodDecl(Id(Account),Instance,[param(Id(number),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(accountNumber)),Id(number)),AssignStmt(FieldAccess(Self(),Id(balance)),FloatLit(0.0))])),MethodDecl(Id(deposit),Instance,[param(Id(amount),FloatType)],VoidType,Block([],[AssignStmt(FieldAccess(Self(),Id(balance)),BinaryOp(+,FieldAccess(Self(),Id(balance)),Id(amount)))])),MethodDecl(Id(withdraw),Instance,[param(Id(amount),FloatType)],VoidType,Block([],[If(BinaryOp(<=,Id(amount),FieldAccess(Self(),Id(balance))),AssignStmt(FieldAccess(Self(),Id(balance)),BinaryOp(-,FieldAccess(Self(),Id(balance)),Id(amount))))])),MethodDecl(Id(getBalance),Instance,[],FloatType,Block([],[Return(FieldAccess(Self(),Id(balance)))]))])])
---
testcase392:Program([ClassDecl(Id(SavingsAccount),Id(Account),[AttributeDecl(Instance,VarDecl(Id(interestRate),FloatType)),MethodDecl(Id(SavingsAccount),Instance,[param(Id(number),IntType),param(Id(rate),FloatType)],Block([],[Call(Self(),Id(Account),[Id(number)]),AssignStmt(FieldAccess(Self(),Id(interestRate)),Id(rate))])),MethodDecl(Id(applyInterest),Instance,[],VoidType,Block([VarDecl(Id(interest),FloatType,BinaryOp(*,FieldAccess(Self(),Id(balance)),FieldAccess(Self(),Id(interestRate))))],[Call(Self(),Id(deposit),[Id(interest)])]))])])
---
testcase393:Program([ClassDecl(Id(CheckingAccount),Id(Account),[AttributeDecl(Instance,VarDecl(Id(overdraftLimit),FloatType)),MethodDecl(Id(CheckingAccount),Instance,[param(Id(number),IntType),param(Id(limit),FloatType)],Block([],[Call(Self(),Id(Account),[Id(number)]),AssignStmt(FieldAccess(Self(),Id(overdraftLimit)),Id(limit))])),MethodDecl(Id(withdraw),Instance,[param(Id(amount),FloatType)],VoidType,Block([],[If(BinaryOp(<=,Id(amount),BinaryOp(+,FieldAccess(Self(),Id(balance)),FieldAccess(Self(),Id(overdraftLimit)))),AssignStmt(FieldAccess(Self(),Id(balance)),BinaryOp(-,FieldAccess(Self(),Id(balance)),Id(amount))))]))])])
---
testcase394:Program([ClassDecl(Id(Bank),[AttributeDecl(Instance,VarDecl(Id(accounts),ArrayType(10,ClassType(Id(Account))))),MethodDecl(Id(Bank),Instance,[param(Id(numAccounts),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(accounts)),NewExpr(Id(Account),[])),For(Id(i),IntLit(0),BinaryOp(-,Id(numAccounts),IntLit(1)),True,If(BinaryOp(==,BinaryOp(%,Id(i),IntLit(2)),IntLit(0)),AssignStmt(ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)),NewExpr(Id(SavingsAccount),[Id(i),FloatLit(0.05)])),AssignStmt(ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)),NewExpr(Id(CheckingAccount),[Id(i),FloatLit(500.0)])))])])),MethodDecl(Id(simulateTransactions),Instance,[],VoidType,Block([],[For(Id(i),IntLit(0),BinaryOp(-,FieldAccess(FieldAccess(Self(),Id(accounts)),Id(length)),IntLit(1)),True,If(BinaryOp(==,ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)),Id(SavingsAccount)),Block([VarDecl(Id(sa),ClassType(Id(SavingsAccount)),ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)))],[Call(Id(sa),Id(deposit),[FloatLit(100.0)]),Call(Id(sa),Id(applyInterest),[])]),Block([VarDecl(Id(ca),ClassType(Id(CheckingAccount)),ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)))],[Call(Id(ca),Id(deposit),[FloatLit(200.0)]),Call(Id(ca),Id(withdraw),[FloatLit(300.0)])]))])])),MethodDecl(Id(printAccountBalances),Instance,[],VoidType,Block([],[For(Id(i),IntLit(0),BinaryOp(-,FieldAccess(FieldAccess(Self(),Id(accounts)),Id(length)),IntLit(1)),True,Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Account ),Id(i)),StringLit( Balance: )),CallExpr(ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)),Id(getBalance),[]))])])]))])])
---
testcase395:Program([ClassDecl(Id(TestBank),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(bank),ClassType(Id(Bank)),NewExpr(Id(Bank),[IntLit(10)]))],[Call(Id(bank),Id(simulateTransactions),[]),Call(Id(bank),Id(printAccountBalances),[])]))])])
---
testcase396:Program([ClassDecl(Id(Account),[AttributeDecl(Instance,VarDecl(Id(accountNumber),IntType)),AttributeDecl(Instance,VarDecl(Id(balance),FloatType)),MethodDecl(Id(Account),Instance,[param(Id(number),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(accountNumber)),Id(number)),AssignStmt(FieldAccess(Self(),Id(balance)),FloatLit(0.0))])),MethodDecl(Id(deposit),Instance,[param(Id(amount),FloatType)],VoidType,Block([],[AssignStmt(FieldAccess(Self(),Id(balance)),BinaryOp(+,FieldAccess(Self(),Id(balance)),Id(amount)))])),MethodDecl(Id(withdraw),Instance,[param(Id(amount),FloatType)],VoidType,Block([],[If(BinaryOp(<=,Id(amount),FieldAccess(Self(),Id(balance))),AssignStmt(FieldAccess(Self(),Id(balance)),BinaryOp(-,FieldAccess(Self(),Id(balance)),Id(amount))))])),MethodDecl(Id(getBalance),Instance,[],FloatType,Block([],[Return(FieldAccess(Self(),Id(balance)))]))]),ClassDecl(Id(SavingsAccount),Id(Account),[AttributeDecl(Instance,VarDecl(Id(interestRate),FloatType)),MethodDecl(Id(SavingsAccount),Instance,[param(Id(number),IntType),param(Id(rate),FloatType)],Block([],[Call(Self(),Id(Account),[Id(number)]),AssignStmt(FieldAccess(Self(),Id(interestRate)),Id(rate))])),MethodDecl(Id(applyInterest),Instance,[],VoidType,Block([VarDecl(Id(interest),FloatType,BinaryOp(*,FieldAccess(Self(),Id(balance)),FieldAccess(Self(),Id(interestRate))))],[Call(Self(),Id(deposit),[Id(interest)])]))]),ClassDecl(Id(CheckingAccount),Id(Account),[AttributeDecl(Instance,VarDecl(Id(overdraftLimit),FloatType)),MethodDecl(Id(CheckingAccount),Instance,[param(Id(number),IntType),param(Id(limit),FloatType)],Block([],[Call(Self(),Id(Account),[Id(number)]),AssignStmt(FieldAccess(Self(),Id(overdraftLimit)),Id(limit))])),MethodDecl(Id(withdraw),Instance,[param(Id(amount),FloatType)],VoidType,Block([],[If(BinaryOp(<=,Id(amount),BinaryOp(+,FieldAccess(Self(),Id(balance)),FieldAccess(Self(),Id(overdraftLimit)))),AssignStmt(FieldAccess(Self(),Id(balance)),BinaryOp(-,FieldAccess(Self(),Id(balance)),Id(amount))))]))]),ClassDecl(Id(Bank),[AttributeDecl(Instance,VarDecl(Id(accounts),ArrayType(10,ClassType(Id(Account))))),MethodDecl(Id(Bank),Instance,[param(Id(numAccounts),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(accounts)),NewExpr(Id(Account),[])),For(Id(i),IntLit(0),BinaryOp(-,Id(numAccounts),IntLit(1)),True,If(BinaryOp(==,BinaryOp(%,Id(i),IntLit(2)),IntLit(0)),AssignStmt(ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)),NewExpr(Id(SavingsAccount),[Id(i),FloatLit(0.05)])),AssignStmt(ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)),NewExpr(Id(CheckingAccount),[Id(i),FloatLit(500.0)])))])])),MethodDecl(Id(simulateTransactions),Instance,[],VoidType,Block([],[For(Id(i),IntLit(0),BinaryOp(-,FieldAccess(FieldAccess(Self(),Id(accounts)),Id(length)),IntLit(1)),True,If(BinaryOp(==,ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)),Id(SavingsAccount)),Block([VarDecl(Id(sa),ClassType(Id(SavingsAccount)),ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)))],[Call(Id(sa),Id(deposit),[FloatLit(100.0)]),Call(Id(sa),Id(applyInterest),[])]),Block([VarDecl(Id(ca),ClassType(Id(CheckingAccount)),ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)))],[Call(Id(ca),Id(deposit),[FloatLit(200.0)]),Call(Id(ca),Id(withdraw),[FloatLit(300.0)])]))])])),MethodDecl(Id(printAccountBalances),Instance,[],VoidType,Block([],[For(Id(i),IntLit(0),BinaryOp(-,FieldAccess(FieldAccess(Self(),Id(accounts)),Id(length)),IntLit(1)),True,Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Account ),Id(i)),StringLit( Balance: )),CallExpr(ArrayCell(FieldAccess(Self(),Id(accounts)),Id(i)),Id(getBalance),[]))])])]))]),ClassDecl(Id(TestBank),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(bank),ClassType(Id(Bank)),NewExpr(Id(Bank),[IntLit(10)]))],[Call(Id(bank),Id(simulateTransactions),[]),Call(Id(bank),Id(printAccountBalances),[])]))])])
---
testcase397:Program([ClassDecl(Id(OperatorTest),[MethodDecl(Id(main),Static,[],VoidType,Block([],[Block([VarDecl(Id(a),IntType,IntLit(10)),VarDecl(Id(b),IntType,IntLit(20)),VarDecl(Id(x),FloatType,FloatLit(15.5)),VarDecl(Id(condition),BoolType,BooleanLit(True)),VarDecl(Id(result1),IntType,BinaryOp(/,BinaryOp(*,BinaryOp(+,Id(a),Id(b)),BinaryOp(-,Id(b),Id(a))),IntLit(2))),VarDecl(Id(result2),FloatType,BinaryOp(/,BinaryOp(+,BinaryOp(*,Id(a),Id(b)),Id(x)),BinaryOp(-,Id(x),Id(b)))),VarDecl(Id(result3),BoolType,BinaryOp(||,BinaryOp(&&,BinaryOp(<,Id(a),Id(b)),BinaryOp(>=,Id(x),Id(a))),Id(condition)))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result 1: ),Id(result1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result 2: ),Id(result2))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result 3: ),Id(result3))])]),Block([VarDecl(Id(numbers),ArrayType(5,IntType),[IntLit(1),IntLit(2),IntLit(3),IntLit(4),IntLit(5)]),VarDecl(Id(sum),IntType,IntLit(0))],[For(Id(i),IntLit(0),BinaryOp(-,FieldAccess(Id(numbers),Id(length)),IntLit(1)),True,Block([],[AssignStmt(Id(sum),BinaryOp(+,Id(sum),ArrayCell(Id(numbers),Id(i))))])]),If(BinaryOp(==,BinaryOp(%,Id(sum),IntLit(2)),IntLit(0)),Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Sum of numbers is even.)])]),Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Sum of numbers is odd.)])]))])]))])])
---
testcase398:Program([ClassDecl(Id(SuperComplexTest),[MethodDecl(Id(customPower),Static,[param(Id(base),FloatType),param(Id(exponent),IntType)],FloatType,Block([],[If(BinaryOp(==,Id(exponent),IntLit(0)),Block([],[Return(IntLit(1))]),If(BinaryOp(==,BinaryOp(%,Id(exponent),IntLit(2)),IntLit(0)),Block([VarDecl(Id(temp),FloatType,CallExpr(Self(),Id(customPower),[Id(base),BinaryOp(/,Id(exponent),IntLit(2))]))],[Return(BinaryOp(*,Id(temp),Id(temp)))]),Block([VarDecl(Id(temp),FloatType,CallExpr(Self(),Id(customPower),[Id(base),BinaryOp(/,BinaryOp(-,Id(exponent),IntLit(1)),IntLit(2))]))],[Return(BinaryOp(*,BinaryOp(*,Id(base),Id(temp)),Id(temp)))])))])),MethodDecl(Id(fibonacci),Static,[param(Id(n),IntType)],IntType,Block([],[If(BinaryOp(<=,Id(n),IntLit(1)),Block([],[Return(Id(n))]),Block([],[Return(BinaryOp(+,CallExpr(Self(),Id(fibonacci),[BinaryOp(-,Id(n),IntLit(1))]),CallExpr(Self(),Id(fibonacci),[BinaryOp(-,Id(n),IntLit(2))])))]))])),MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(sum),FloatType,IntLit(0)),VarDecl(Id(finalValue),IntType,IntLit(0))],[For(Id(i),IntLit(1),IntLit(10),True,Block([VarDecl(Id(factorial),IntType,IntLit(1)),VarDecl(Id(fibonacciSum),IntType,IntLit(0))],[For(Id(j),IntLit(1),Id(i),True,Block([],[AssignStmt(Id(factorial),BinaryOp(*,Id(factorial),Id(j))),AssignStmt(Id(fibonacciSum),BinaryOp(+,Id(fibonacciSum),CallExpr(Self(),Id(fibonacci),[Id(j)])))])]),Block([VarDecl(Id(customPowerResult),FloatType,CallExpr(Self(),Id(customPower),[Id(factorial),Id(i)]))],[AssignStmt(Id(sum),BinaryOp(+,Id(sum),BinaryOp(*,Id(customPowerResult),Id(fibonacciSum))))])])]),For(Id(k),IntLit(1),IntLit(5),True,Block([],[If(BinaryOp(==,BinaryOp(%,Id(k),IntLit(2)),IntLit(0)),Block([],[AssignStmt(Id(finalValue),BinaryOp(+,BinaryOp(+,Id(finalValue),CallExpr(Self(),Id(customPower),[Id(sum),Id(k)])),Id(k)))]),Block([],[AssignStmt(Id(finalValue),BinaryOp(-,BinaryOp(-,Id(finalValue),CallExpr(Self(),Id(customPower),[Id(sum),Id(k)])),Id(k)))]))])]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Final Value: ),Id(finalValue))])]))])])
---
testcase399:Program([ClassDecl(Id(UltraComplexTest),[MethodDecl(Id(factorial),Static,[param(Id(n),IntType)],IntType,Block([],[If(BinaryOp(<=,Id(n),IntLit(1)),Block([],[Return(IntLit(1))]),Block([],[Return(BinaryOp(*,Id(n),CallExpr(Self(),Id(factorial),[BinaryOp(-,Id(n),IntLit(1))])))]))])),MethodDecl(Id(gcd),Static,[param(Id(a),IntType),param(Id(b),IntType)],IntType,Block([],[If(BinaryOp(==,Id(b),IntLit(0)),Block([],[Return(Id(a))]),Block([],[Return(CallExpr(Self(),Id(gcd),[Id(b),BinaryOp(%,Id(a),Id(b))]))]))])),MethodDecl(Id(computeSeries),Static,[param(Id(x),IntType)],FloatType,Block([VarDecl(Id(result),FloatType,IntLit(0))],[For(Id(i),IntLit(1),IntLit(10),True,Block([],[AssignStmt(Id(result),BinaryOp(+,Id(result),BinaryOp(/,CallExpr(Self(),Id(customPower),[Id(x),Id(i)]),CallExpr(Self(),Id(factorial),[Id(i)]))))])]),Return(Id(result))])),MethodDecl(Id(customPower),Static,[param(Id(base),FloatType),param(Id(exponent),IntType)],FloatType,Block([],[If(BinaryOp(==,Id(exponent),IntLit(0)),Block([],[Return(IntLit(1))]),If(BinaryOp(==,BinaryOp(%,Id(exponent),IntLit(2)),IntLit(0)),Block([VarDecl(Id(temp),FloatType,CallExpr(Self(),Id(customPower),[Id(base),BinaryOp(/,Id(exponent),IntLit(2))]))],[Return(BinaryOp(*,Id(temp),Id(temp)))]),Block([VarDecl(Id(temp),FloatType,CallExpr(Self(),Id(customPower),[Id(base),BinaryOp(/,BinaryOp(-,Id(exponent),IntLit(1)),IntLit(2))]))],[Return(BinaryOp(*,BinaryOp(*,Id(base),Id(temp)),Id(temp)))])))])),MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(finalResult),IntType,IntLit(0))],[For(Id(a),IntLit(1),IntLit(5),True,Block([],[For(Id(b),IntLit(1),IntLit(5),True,Block([],[If(BinaryOp(!=,Id(a),Id(b)),Block([],[For(Id(c),IntLit(1),IntLit(5),True,Block([],[For(Id(d),IntLit(1),IntLit(5),True,Block([],[If(BinaryOp(!=,Id(c),Id(d)),Block([VarDecl(Id(gcdValue),IntType,CallExpr(Self(),Id(gcd),[BinaryOp(*,Id(a),Id(b)),BinaryOp(*,Id(c),Id(d))])),VarDecl(Id(sum),IntType,BinaryOp(+,BinaryOp(+,BinaryOp(+,Id(a),Id(b)),Id(c)),Id(d))),VarDecl(Id(seriesResult),FloatType,CallExpr(Self(),Id(computeSeries),[Id(sum)]))],[If(BinaryOp(==,BinaryOp(%,Id(gcdValue),IntLit(2)),IntLit(0)),Block([],[AssignStmt(Id(finalResult),BinaryOp(+,Id(finalResult),BinaryOp(*,Id(seriesResult),Id(gcdValue))))]),Block([],[AssignStmt(Id(finalResult),BinaryOp(-,Id(finalResult),BinaryOp(/,Id(seriesResult),Id(gcdValue))))]))]))])])])])]))])])])]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Final Result: ),Id(finalResult))])]))])])
---



