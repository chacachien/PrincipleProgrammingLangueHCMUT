testcase300:Program([ClassDecl(Id(a),[AttributeDecl(Instance,VarDecl(Id(b),FloatType)),AttributeDecl(Instance,VarDecl(Id(c),FloatType))])])
---
testcase301:Program([ClassDecl(Id(a),[AttributeDecl(Instance,VarDecl(Id(b),FloatType,IntLit(3))),AttributeDecl(Instance,VarDecl(Id(d),FloatType,IntLit(3))),AttributeDecl(Instance,VarDecl(Id(c),FloatType,BinaryOp(+,IntLit(3),IntLit(4))))])])
---
testcase302:Program([ClassDecl(Id(a),[AttributeDecl(Static,ConstDecl(Id(c),BoolType,IntLit(2)))])])
---
testcase303:Program([ClassDecl(Id(a),[AttributeDecl(Static,ConstDecl(Id(c),IntType,IntLit(1)))])])
---
testcase304:Program([ClassDecl(Id(a),[AttributeDecl(Static,VarDecl(Id(a),FloatType))])])
---
testcase305:Program([ClassDecl(Id(Rectangle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))]))])])
---
testcase306:Program([ClassDecl(Id(Rectangle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))])),MethodDecl(Id(getLength),Instance,[],FloatType,Block([],[Return(BinaryOp(+,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))]))])])
---
testcase307:Program([ClassDecl(Id(Shape),[AttributeDecl(Instance,VarDecl(Id(length),FloatType)),AttributeDecl(Instance,VarDecl(Id(width),FloatType)),MethodDecl(Id(getNumOfShape),Static,[],IntType,Block([],[Return(Id(numOfShape))]))])])
---
testcase308:Program([ClassDecl(Id(Rectangle),[MethodDecl(Id(getArea),Instance,[param(Id(a),FloatType),param(Id(b),FloatType),param(Id(c),IntType)],FloatType,Block([],[Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))]))])])
---
testcase309:Program([ClassDecl(Id(Shape),[AttributeDecl(Static,ConstDecl(Id(numOfShape),IntType,IntLit(0))),AttributeDecl(Instance,ConstDecl(Id(immuAttribute),IntType,IntLit(0))),AttributeDecl(Instance,VarDecl(Id(length),FloatType)),AttributeDecl(Instance,VarDecl(Id(width),FloatType)),MethodDecl(Id(getNumOfShape),Static,[],IntType,Block([],[Return(Id(numOfShape))]))]),ClassDecl(Id(Rectangle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(width))))]))])])
---
testcase310:Program([ClassDecl(Id(Test),[AttributeDecl(Instance,VarDecl(Id(a),IntType)),AttributeDecl(Instance,VarDecl(Id(b),FloatType)),AttributeDecl(Instance,VarDecl(Id(c),BoolType))])])
---
testcase311:Program([ClassDecl(Id(Circle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,BinaryOp(*,FloatLit(3.14),FieldAccess(Self(),Id(radius))),FieldAccess(Self(),Id(radius))))]))])])
---
testcase312:Program([ClassDecl(Id(Test),[MethodDecl(Id(printMessage),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Hello, World!)])]))])])
---
testcase313:Program([ClassDecl(Id(Math),[MethodDecl(Id(max),Static,[param(Id(a),IntType),param(Id(b),IntType)],IntType,Block([],[If(BinaryOp(>,Id(a),Id(b)),Return(Id(a)),Return(Id(b)))]))])])
---
testcase314:Program([ClassDecl(Id(Circle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,BinaryOp(*,FloatLit(3.14),FieldAccess(Self(),Id(radius))),FieldAccess(Self(),Id(radius))))]))]),ClassDecl(Id(Square),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,FieldAccess(Self(),Id(length)),FieldAccess(Self(),Id(length))))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(c),ClassType(Id(Shape))),VarDecl(Id(s),ClassType(Id(Shape))),VarDecl(Id(area1),FloatType),VarDecl(Id(area2),FloatType)],[AssignStmt(Id(c),NewExpr(Id(Circle),[])),AssignStmt(Id(s),NewExpr(Id(Square),[])),AssignStmt(Id(area1),CallExpr(Id(c),Id(getArea),[])),AssignStmt(Id(area2),CallExpr(Id(s),Id(getArea),[])),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Area of Circle: ),Id(area1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Area of Square: ),Id(area2))])]))])])
---
testcase315:Program([ClassDecl(Id(Shape),[AttributeDecl(Instance,VarDecl(Id(length),FloatType)),AttributeDecl(Instance,VarDecl(Id(width),FloatType)),MethodDecl(Id(Shape),Instance,[param(Id(l),FloatType),param(Id(w),FloatType)],Block([],[AssignStmt(FieldAccess(Self(),Id(length)),Id(l)),AssignStmt(FieldAccess(Self(),Id(width)),Id(w))]))]),ClassDecl(Id(Circle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],FloatType,Block([],[Return(BinaryOp(*,BinaryOp(*,FloatLit(3.14),FieldAccess(Self(),Id(radius))),FieldAccess(Self(),Id(radius))))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(c),ClassType(Id(Circle)),NewExpr(Id(Circle),[FloatLit(5.0),FloatLit(5.0)])),VarDecl(Id(area),FloatType,CallExpr(Id(c),Id(getArea),[]))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Area of Circle: ),Id(area))])]))])])
---
testcase316:Program([ClassDecl(Id(Animal),[AttributeDecl(Instance,VarDecl(Id(name),StringType)),AttributeDecl(Instance,VarDecl(Id(age),IntType)),MethodDecl(Id(Animal),Instance,[param(Id(name),StringType),param(Id(age),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(name)),Id(name)),AssignStmt(FieldAccess(Self(),Id(age)),Id(age))])),MethodDecl(Id(makeSound),Instance,[],VoidType,Block([],[]))]),ClassDecl(Id(Dog),Id(Animal),[AttributeDecl(Instance,VarDecl(Id(breed),StringType)),MethodDecl(Id(Dog),Instance,[param(Id(name),StringType),param(Id(age),IntType),param(Id(breed),StringType)],Block([],[Call(Self(),Id(Animal),[Id(name),Id(age)]),AssignStmt(FieldAccess(Self(),Id(breed)),Id(breed))])),MethodDecl(Id(makeSound),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Woof! Woof!)])])),MethodDecl(Id(fetch),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Fetching the ball!)])]))]),ClassDecl(Id(Cat),Id(Animal),[AttributeDecl(Instance,VarDecl(Id(furColor),StringType)),MethodDecl(Id(Cat),Instance,[param(Id(name),StringType),param(Id(age),IntType),param(Id(furColor),StringType)],Block([],[Call(Self(),Id(Animal),[Id(name),Id(age)]),AssignStmt(FieldAccess(Self(),Id(furColor)),Id(furColor))])),MethodDecl(Id(makeSound),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Meow!)])])),MethodDecl(Id(climbTree),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[StringLit(Climbing the tree!)])]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(dog),ClassType(Id(Dog)),NewExpr(Id(Dog),[StringLit(Buddy),IntLit(3),StringLit(Labrador)])),VarDecl(Id(cat),ClassType(Id(Cat)),NewExpr(Id(Cat),[StringLit(Whiskers),IntLit(2),StringLit(Gray)])),VarDecl(Id(animal1),ClassType(Id(Animal)),Id(dog)),VarDecl(Id(animal2),ClassType(Id(Animal)),Id(cat))],[Call(Id(dog),Id(makeSound),[]),Call(Id(cat),Id(makeSound),[]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Dog's breed: ),FieldAccess(Id(dog),Id(breed)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Cat's fur color: ),FieldAccess(Id(cat),Id(furColor)))]),Call(Id(animal1),Id(makeSound),[]),Call(Id(animal2),Id(makeSound),[]),Call(Id(animal1),Id(fetch),[]),Call(Id(animal2),Id(climbTree),[])]))])])
---
testcase317:Program([ClassDecl(Id(Point),[AttributeDecl(Instance,VarDecl(Id(x),IntType)),AttributeDecl(Instance,VarDecl(Id(y),IntType)),MethodDecl(Id(Point),Instance,[param(Id(x),IntType),param(Id(y),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(x)),Id(x)),AssignStmt(FieldAccess(Self(),Id(y)),Id(y))])),MethodDecl(Id(display),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(x: ),FieldAccess(Self(),Id(x))),StringLit(, y: )),FieldAccess(Self(),Id(y)))])])),MethodDecl(Id(add),Static,[param(Id(p1),ClassType(Id(Point))),param(Id(p2),ClassType(Id(Point)))],ClassType(Id(Point)),Block([],[Return(NewExpr(Id(Point),[BinaryOp(+,FieldAccess(Id(p1),Id(x)),FieldAccess(Id(p2),Id(x))),BinaryOp(+,FieldAccess(Id(p1),Id(y)),FieldAccess(Id(p2),Id(y)))]))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(p1),ClassType(Id(Point)),NewExpr(Id(Point),[IntLit(3),IntLit(5)])),VarDecl(Id(p2),ClassType(Id(Point)),NewExpr(Id(Point),[UnaryOp(-,IntLit(2)),IntLit(7)])),VarDecl(Id(sum),ClassType(Id(Point)),CallExpr(Id(Point),Id(add),[Id(p1),Id(p2)]))],[Call(Id(p1),Id(display),[]),Call(Id(p2),Id(display),[]),Call(Id(sum),Id(display),[])]))])])
---
testcase318:Program([ClassDecl(Id(Student),[AttributeDecl(Instance,VarDecl(Id(name),StringType)),AttributeDecl(Instance,VarDecl(Id(age),IntType)),AttributeDecl(Instance,VarDecl(Id(gpa),FloatType)),MethodDecl(Id(Student),Instance,[param(Id(name),StringType),param(Id(age),IntType),param(Id(gpa),FloatType)],Block([],[AssignStmt(FieldAccess(Self(),Id(name)),Id(name)),AssignStmt(FieldAccess(Self(),Id(age)),Id(age)),AssignStmt(FieldAccess(Self(),Id(gpa)),Id(gpa))])),MethodDecl(Id(display),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Name:),FieldAccess(Self(),Id(name)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Age:),FieldAccess(Self(),Id(age)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(GPA:),FieldAccess(Self(),Id(gpa)))])])),MethodDecl(Id(getGrade),Instance,[],StringType,Block([],[If(BinaryOp(>=,FieldAccess(Self(),Id(gpa)),FloatLit(3.5)),Return(StringLit(A)),Block([],[If(BinaryOp(>=,FieldAccess(Self(),Id(gpa)),FloatLit(3.0)),Return(StringLit(B)),Block([],[If(BinaryOp(>=,FieldAccess(Self(),Id(gpa)),FloatLit(2.0)),Return(StringLit(C)),Block([],[If(BinaryOp(>=,FieldAccess(Self(),Id(gpa)),FloatLit(1.0)),Return(StringLit(D)),Return(StringLit(F)))]))]))]))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(s1),ClassType(Id(Student)),NewExpr(Id(Student),[StringLit(Alice),IntLit(20),FloatLit(3.8)])),VarDecl(Id(s2),ClassType(Id(Student)),NewExpr(Id(Student),[StringLit(Bob),IntLit(19),FloatLit(2.9)]))],[Call(Id(s1),Id(display),[]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Grade:),CallExpr(Id(s1),Id(getGrade),[]))]),Call(Id(s2),Id(display),[]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Grade:),CallExpr(Id(s2),Id(getGrade),[]))])]))])])
---
testcase319:Program([ClassDecl(Id(Math),[MethodDecl(Id(factorial),Static,[param(Id(n),IntType)],IntType,Block([],[If(BinaryOp(==,Id(n),IntLit(0)),Block([],[Return(IntLit(1))]),Block([],[Return(BinaryOp(*,Id(n),CallExpr(Self(),Id(factorial),[BinaryOp(-,Id(n),IntLit(1))])))]))])),MethodDecl(Id(fibonacci),Static,[param(Id(n),IntType)],IntType,Block([],[If(BinaryOp(<=,Id(n),IntLit(1)),Block([],[Return(Id(n))]),Block([],[Return(BinaryOp(+,CallExpr(Self(),Id(fibonacci),[BinaryOp(-,Id(n),IntLit(1))]),CallExpr(Self(),Id(fibonacci),[BinaryOp(-,Id(n),IntLit(2))])))]))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(num1),IntType,IntLit(5)),VarDecl(Id(num2),IntType,IntLit(6)),VarDecl(Id(factNum1),IntType,CallExpr(Id(Math),Id(factorial),[Id(num1)])),VarDecl(Id(factNum2),IntType,CallExpr(Id(Math),Id(factorial),[Id(num2)])),VarDecl(Id(fibNum1),IntType,CallExpr(Id(Math),Id(fibonacci),[Id(num1)])),VarDecl(Id(fibNum2),IntType,CallExpr(Id(Math),Id(fibonacci),[Id(num2)]))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Factorial_of),Id(num1)),StringLit(:)),Id(factNum1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Factorial_of),Id(num2)),StringLit(:)),Id(factNum2))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Fibonacci_of),Id(num1)),StringLit(:)),Id(fibNum1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,BinaryOp(^,BinaryOp(^,StringLit(Fibonacci_of),Id(num2)),StringLit(:)),Id(fibNum2))])]))])])
---
testcase320:Program([ClassDecl(Id(Bank),[AttributeDecl(Instance,VarDecl(Id(interestRate),FloatType)),MethodDecl(Id(Bank),Instance,[param(Id(rate),FloatType)],Block([],[AssignStmt(FieldAccess(Self(),Id(interestRate)),Id(rate))])),MethodDecl(Id(calculateInterest),Instance,[param(Id(principal),FloatType)],FloatType,Block([],[Return(BinaryOp(*,Id(principal),FieldAccess(Self(),Id(interestRate))))]))]),ClassDecl(Id(SavingsAccount),Id(Bank),[MethodDecl(Id(SavingsAccount),Instance,[param(Id(rate),FloatType)],Block([],[Call(Self(),Id(Bank),[Id(rate)])])),MethodDecl(Id(calculateInterestReal),Instance,[param(Id(principal),FloatType)],FloatType,Block([],[Return(BinaryOp(+,CallExpr(Self(),Id(calculateInterest),[Id(principal)]),IntLit(100)))]))]),ClassDecl(Id(FixedDeposit),Id(Bank),[MethodDecl(Id(FixedDeposit),Instance,[param(Id(rate),FloatType)],Block([],[Call(Self(),Id(Bank),[Id(rate)])])),MethodDecl(Id(calculateInterestReal),Instance,[param(Id(principal),FloatType),param(Id(years),IntType)],FloatType,Block([],[Return(BinaryOp(*,CallExpr(Self(),Id(calculateInterest),[Id(principal)]),Id(years)))]))]),ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(bank1),ClassType(Id(Bank))),VarDecl(Id(bank2),ClassType(Id(Bank))),VarDecl(Id(principal),FloatType,FloatLit(1000.0)),VarDecl(Id(interest1),FloatType),VarDecl(Id(interest2),FloatType)],[AssignStmt(Id(bank1),NewExpr(Id(SavingsAccount),[FloatLit(0.05)])),AssignStmt(Id(bank2),NewExpr(Id(FixedDeposit),[FloatLit(0.08)])),AssignStmt(Id(interest1),CallExpr(Id(bank1),Id(calculateInterest),[Id(principal)])),AssignStmt(Id(interest2),CallExpr(Id(bank2),Id(calculateInterest),[Id(principal),IntLit(5)])),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Interest_from_Savings_Account:),Id(interest1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Interest_from_Fixed Deposit:),Id(interest2))])]))])])
---
testcase321:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(a),IntType,IntLit(5)),VarDecl(Id(b),IntType,IntLit(10)),VarDecl(Id(c),IntType,IntLit(15)),VarDecl(Id(result),BoolType,BinaryOp(>=,BinaryOp(+,Id(a),BinaryOp(*,Id(b),Id(c))),BinaryOp(&&,BinaryOp(-,Id(c),BinaryOp(/,Id(b),Id(a))),UnaryOp(!,BinaryOp(>,Id(a),Id(b))))))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result: ),Id(result))])]))])])
---
testcase322:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(p),BoolType,BooleanLit(True)),VarDecl(Id(q),BoolType,BooleanLit(False)),VarDecl(Id(result),BoolType,BinaryOp(||,BinaryOp(&&,Id(p),Id(q)),UnaryOp(!,Id(p))))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result:),Id(result))])]))])])
---
testcase323:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(a),IntType,IntLit(5)),VarDecl(Id(b),IntType,IntLit(10)),VarDecl(Id(c),IntType,IntLit(15)),VarDecl(Id(result1),BoolType,BinaryOp(>,BinaryOp(*,BinaryOp(+,Id(a),Id(b)),Id(c)),BinaryOp(+,Id(a),BinaryOp(*,Id(b),Id(c))))),VarDecl(Id(result2),BoolType,BinaryOp(||,BinaryOp(&&,BinaryOp(>=,Id(a),Id(b)),BinaryOp(<,Id(c),Id(a))),BinaryOp(<=,Id(b),Id(c)))),VarDecl(Id(result3),BoolType,BinaryOp(&&,UnaryOp(!,BinaryOp(!=,BinaryOp(||,BinaryOp(==,Id(a),Id(b)),Id(c)),Id(b))),UnaryOp(!,BinaryOp(>,Id(c),BinaryOp(&&,Id(a),BinaryOp(<,Id(b),Id(c)))))))],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result 1: ),Id(result1))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result 2: ),Id(result2))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Result 3: ),Id(result3))])]))])])
---
testcase324:Program([ClassDecl(Id(Person),[AttributeDecl(Instance,VarDecl(Id(name),StringType)),AttributeDecl(Instance,VarDecl(Id(age),IntType)),MethodDecl(Id(Person),Instance,[param(Id(n),StringType),param(Id(a),IntType)],Block([],[AssignStmt(FieldAccess(Self(),Id(name)),Id(n)),AssignStmt(FieldAccess(Self(),Id(age)),Id(a))])),MethodDecl(Id(display),Instance,[],VoidType,Block([],[Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Name:),FieldAccess(Self(),Id(name)))]),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Age:),FieldAccess(Self(),Id(age)))])]))])])
---
testcase325:Program([ClassDecl(Id(Test),[MethodDecl(Id(main),Static,[],VoidType,Block([VarDecl(Id(persons),ArrayType(3,ClassType(Id(Person)))),VarDecl(Id(totalAge),IntType,IntLit(0))],[AssignStmt(ArrayCell(Id(persons),IntLit(0)),NewExpr(Id(Person),[StringLit(Alice),IntLit(25)])),AssignStmt(ArrayCell(Id(persons),IntLit(1)),NewExpr(Id(Person),[StringLit(Bob),IntLit(30)])),AssignStmt(ArrayCell(Id(persons),IntLit(2)),NewExpr(Id(Person),[StringLit(Charlie),IntLit(22)])),Call(Id(io),Id(writeStrLn),[BinaryOp(^,StringLit(Total Age:),Id(totalAge))])]))])])
---