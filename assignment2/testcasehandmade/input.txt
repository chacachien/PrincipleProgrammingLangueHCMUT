testcase300:
class a{
    float b, c;
}
---
testcase301:
class a{
    float b = 3, d = 3, c = 3+4; 
}
---
testcase302:
class a{
    static final boolean c = 2;
}
---
testcase303:
class a{
    final static int c = 1;
    
}
---
testcase304:
class a{
    static float a;
}
---
testcase305:
class Rectangle extends Shape {
    float getArea(){
        return this.length*this.width;
    }
}
---
testcase306:
class Rectangle extends Shape {
    float getArea(){
        return this.length*this.width;
    }
    float getLength(){
        return this.length+this.width;
    }
}
---
testcase307:
class Shape {
    float length,width;
    static int getNumOfShape() {
        return numOfShape;
    }
}
---
testcase308:
class Rectangle{
    float getArea(float a,b ; int c){
        return this.length*this.width;
    }
}
---
testcase309:
class Shape {
    static final int numOfShape = 0;
    final int immuAttribute = 0;
    float length, width;

    static int getNumOfShape() {
        return numOfShape;
    }
}

class Rectangle extends Shape {
    float getArea() {
        return this.length * this.width;
    }
}
---
testcase310:
class Test {
    int a;
    float b;
    boolean c;
}
---
testcase311:
class Circle extends Shape{
    float getArea() {
        return 3.14 * this.radius * this.radius;
    }
}
---
testcase312:
class Test{void printMessage() {io.writeStrLn("Hello, World!");}}
---
testcase313:
class Math{
    static int max(int a; int b) {
        if (a > b) then return a;
        else return b;
    }
}
---
testcase314:
class Circle extends Shape {
    float getArea() {
        return 3.14 * this.radius * this.radius;
    }
}
class Square extends Shape {
    float getArea() {
        return this.length * this.length;
    }
}
class Test {
    void main() {
        Shape c, s;
        float area1, area2;
        
        c := new Circle();
        s := new Square();
        area1 := c.getArea();
        area2 := s.getArea();
        io.writeStrLn("Area of Circle: " ^ area1);
        io.writeStrLn("Area of Square: " ^ area2);
    }
}
---
testcase315:
class Shape {
    float length, width;
    Shape(float l, w) {
        this.length := l;
        this.width := w;
    }
}
class Circle extends Shape {
    float getArea() {
        return 3.14 * this.radius * this.radius;
    }
}
class Test {
    void main() {
        Circle c = new Circle(5.0, 5.0);
        float area = c.getArea();
        io.writeStrLn("Area of Circle: " ^ area);
    }
}
---
testcase316:
class Animal {
    string name;
    int age;

    Animal(string name; int age) {
        this.name := name;
        this.age := age;
    }

    void makeSound() { }
}

class Dog extends Animal {
    string breed;

    Dog(string name; int age; string breed) {
        this.Animal(name, age);
        this.breed := breed;
    }

    void makeSound() {
        io.writeStrLn("Woof! Woof!");
    }

    void fetch() {
        io.writeStrLn("Fetching the ball!");
    }
}

class Cat extends Animal {
    string furColor;

    Cat(string name; int age; string furColor) {
        this.Animal(name, age);
        this.furColor := furColor;
    }

    void makeSound() {
        io.writeStrLn("Meow!");
    }

    void climbTree() {
        io.writeStrLn("Climbing the tree!");
    }
}

class Test {
    void main() {
        Dog dog = new Dog("Buddy", 3, "Labrador");
        Cat cat = new Cat("Whiskers", 2, "Gray");
        Animal animal1 = dog;
        Animal animal2 = cat;
        dog.makeSound();
        cat.makeSound();

        io.writeStrLn("Dog's breed: " ^ dog.breed);
        io.writeStrLn("Cat's fur color: " ^ cat.furColor);

        animal1.makeSound();
        animal2.makeSound();

        animal1.fetch();
        animal2.climbTree();
    }
}
---
testcase317:
class Point {
    int x, y;

    Point(int x; int y) {
        this.x := x;
        this.y := y;
    }

    void display() {
        io.writeStrLn("x: " ^ this.x ^ ", y: " ^ this.y);
    }

    static Point add(Point p1, p2) {
        return new Point(p1.x + p2.x, p1.y + p2.y);
    }
}

class Test {
    void main() {
        Point p1 = new Point(3, 5);
        Point p2 = new Point(-2, 7);
        Point sum = Point.add(p1, p2);

        p1.display();
        p2.display();
        sum.display();
    }
}
---
testcase318:
class Student {
    string name;
    int age;
    float gpa;

    Student(string name; int age; float gpa) {
        this.name := name;
        this.age := age;
        this.gpa := gpa;
    }

    void display() {
        io.writeStrLn("Name:" ^ this.name);
        io.writeStrLn("Age:" ^ this.age);
        io.writeStrLn("GPA:" ^ this.gpa);
    }

    string getGrade() {
        if (this.gpa >= 3.5) then return "A";
        else {
            if (this.gpa >= 3.0) then return "B";
            else {
                if (this.gpa >= 2.0) then return "C";
                else {
                    if (this.gpa >= 1.0) then return "D";
                    else return "F";
                }
            }
        }
    }
}

class Test {
    void main() {
        Student s1 = new Student("Alice", 20, 3.8);
        Student s2 = new Student("Bob", 19, 2.9);

        s1.display();
        io.writeStrLn("Grade:" ^ s1.getGrade());

        s2.display();
        io.writeStrLn("Grade:" ^ s2.getGrade());
    }
}
---
testcase319:
class Math {
    static int factorial(int n) {
        if (n == 0) then {
            return 1;
        } else {
            return n * this.factorial(n - 1);
        }
    }

    static int fibonacci(int n) {
        if (n <= 1) then {
            return n;
        } else {
            return this.fibonacci(n - 1) + this.fibonacci(n - 2);
        }
    }
}

class Test {
    void main() {
        int num1 = 5;
        int num2 = 6;

        int factNum1 = Math.factorial(num1);
        int factNum2 = Math.factorial(num2);

        int fibNum1 = Math.fibonacci(num1);
        int fibNum2 = Math.fibonacci(num2);

        io.writeStrLn("Factorial_of" ^ num1 ^ ":" ^ factNum1);
        io.writeStrLn("Factorial_of" ^ num2 ^ ":" ^ factNum2);
        io.writeStrLn("Fibonacci_of" ^ num1 ^ ":" ^ fibNum1);
        io.writeStrLn("Fibonacci_of" ^ num2 ^ ":" ^ fibNum2);
    }
}
---
testcase320:
class Bank {
    float interestRate;

    Bank(float rate) {
        this.interestRate := rate;
    }

    float calculateInterest(float principal) {
        return principal * this.interestRate;
    }
}

class SavingsAccount extends Bank {
    SavingsAccount(float rate) {
        this.Bank(rate);
    }

    float calculateInterestReal(float principal) {
        return this.calculateInterest(principal) + 100;
    }
}

class FixedDeposit extends Bank {
    FixedDeposit(float rate) {
        this.Bank(rate);
    }

    float calculateInterestReal(float principal; int years) {
        return this.calculateInterest(principal) * years;
    }
}

class Test {
    void main() {
        Bank bank1, bank2;
        float principal = 1000.0;
        float interest1, interest2;


        bank1 := new SavingsAccount(0.05);
        bank2 := new FixedDeposit(0.08);


        interest1 := bank1.calculateInterest(principal);
        interest2 := bank2.calculateInterest(principal, 5);

        io.writeStrLn("Interest_from_Savings_Account:" ^ interest1);
        io.writeStrLn("Interest_from_Fixed Deposit:" ^ interest2);
    }
}
---
testcase321:
class Test {
    void main() {
        int a = 5, b = 10;
        int c = 15;
        boolean result = a + b * c >= c - b / a && !(a > b);
        io.writeStrLn("Result: " ^ result);
    }
}
---
testcase322:
class Test {
    static void main() {
        boolean p = true;
        boolean q = false;
        boolean result = p && q || !p;
        io.writeStrLn("Result:" ^ result);
    }
}
---
testcase323:
class Test {
    static void main() {
        int a = 5;
        int b = 10, c = 15;

        boolean result1 = (a + b) * c > a + b * c;
        boolean result2 = (a >= b) && (c < a) || (b <= c);
        boolean result3 = !((a == b) || c != b) && !(c > a && (b < c));

        io.writeStrLn("Result 1: " ^ result1);
        io.writeStrLn("Result 2: " ^ result2);
        io.writeStrLn("Result 3: " ^ result3);
    }
}
---
testcase324:
class Person {
    string name;
    int age;
    
    Person(string n; int a) {
        this.name := n;
        this.age := a;
    }
    
    void display() {
        io.writeStrLn("Name:" ^ this.name);
        io.writeStrLn("Age:" ^ this.age);
    }
}
---
testcase325:
class Test {
    static void main() {
        Person[3] persons;
        int totalAge = 0;
        persons[0] := new Person("Alice", 25);
        persons[1] := new Person("Bob", 30);
        persons[2] := new Person("Charlie", 22);
        io.writeStrLn("Total Age:" ^ totalAge);
    }
}
---
testcase326:
class Library {
    Book[5] books;
    
    Library(Book[5] b) {
        books := b;
    }
    
    void displayBooks() {
        io.writeStrLn("Library_Catalog:");
        for i := 0 to books.length do {
            (books[i]).displayInfo();
        }
    }
}

class Test {
    void main() {
        Book[3] bookList;
        Library myLibrary = new Library(bookList);
        bookList[0] := new Book("HarryPotter", "J.K.Rowling");
        bookList[1] := new Book("TheHobbit", "J.R.R.Tolkien");
    }
}
---
testcase327:
class array {
    void test() {
        x.b[2] := x.m()[3];
    }
}
---
testcase328:
class array {
    void test() {
        a[3+x.foo(2)] := a[b[2]] +3;
    }
}
---
testcase329:
class Shape {
    static final int numOfShape = 0;
    final int immuAttribute = 0;
    float length,width;
    static int getNumOfShape() {
        return numOfShape;
    }
}
---
testcase330:
class test {
    void main(){
        Shape s;
        s := new Rectangle(3,4);
        s := new Triangle(3,4);
    }
}
---
testcase331:
class test {
    void main(){
        Shape s = new Shape(5, 10);
    }
}
---
testcase332:
class test {
    void main(){
        this.aPI := 3.14;
        value := x.foo(5);
        l[3] := value * 2;
    }
}
---
testcase333:
class test {
    void main(){
        float r,s;
        int[5] a,b;
        r:=2.0;
        s:=r*r*this.myPI;
        a[0]:= s;
    }
}
---
testcase334:
class testForLoop {
    void main(){
        for i := 1 to 100 do {
            io.writeIntLn(i);
            Intarray[i] := i + 1;
        }
        for x := 5 downto 2 do
            io.writeIntLn(x);
    }
}
---
testcase335:
class testBrS {
    void main(){
        break;
    }
}
---
testcase336:
class testConS {
    void main(){
        continue;
    }
}
---
testcase337:
class fac {
    int factorial(int n){
        if n == 0 then return 1; else return n * this.factorial(n - 1);
    }
    void main(){
        int x;
        x := io.readInt();
        io.writeIntLn(this.factorial(x));
    }
}
---
testcase338:
class decl {
	int a, b, c;
	float x, y;
	string z = "abc";
	static boolean d = true;
}
---
testcase339:
class test {
    int a;
    float b;
    string z;
    float nml () {
        for i:= a to b do this.hahaha();
            for i := 4 downto -5 do h := 6;
        return 1;
    }
}
---
testcase340:
class testPrecedence {
	int foo() {
		a [(1 + 2 * 3 - 4 / 5 && 6 && -7)*(1+2+3)-(4+5*6/abc && (123))] := a[(((-5)))];
	}
}
---
testcase341:
class testPrecedence {
	int foo() {
		a [(1 + 2 * 3 - 4 / 5 && 6 || 7)*(1+2+3)-(4+5*6/abc && !(123))] := a[(((-5)))];
	}
}
---
testcase342:
class testFor {
	int foo() {
		for i := 1 to 10+5-4*e+x do break;
	}
}
---
testcase343:
class String1 {
	string a = "chacachien";
	string getString(){
		return this.a;
	}
}
class String2 {
	string b = "NguyenPhat";
	string getString(){
		return this.b;
	}
}
class Example {
	void main(){
		String1 str1;
		String2 str2;
		string result;
		result := str1.getString ^ str2.getString;
	}
}
---
testcase344:
class Animal {
	void move(){}
	void eat(){}
	void label() {
		System.out.println("Animal's data:");
	}
}
class Bird extends Animal {

	void move() {
		 System.out.println("Moves by flying.");
     }
	void eat() {
		 System.out.println("Eats birdfood.");
	}	 
}

class Fish extends Animal {
		 void move() {
			 System.out.println("Moves by swimming.");
	     }
		 void eat() {
			 System.out.println("Eats seafood.");
		 }
}
class TestBird {
	static void main() {
		Animal myBird;
		myBird := new Bird();

		myBird.label();
		myBird.move();
		myBird.eat();
	}
}

class TestFish {
	static void main() {
		Animal myFish;
		myFish := new Fish();

		myFish.label();
		myFish.move();
		myFish.eat();
	}
}
---
testcase345:
class testArray {
	int foo() {
		int[3] a = {5.1, 6.2, true};
	}
}
---
testcase346:
class a extends b 
{
    int c = this.ok().not_ok.very_ok().pho.rose.uu / 2 \ 5;
}
---
testcase347:
class Shape {
    static final int numOfShape = 0;
    final int immuAttribute = 0;
    float length,width;
    static int getNumOfShape() {
        return numOfShape;
    }
}
---
testcase348:
class a extends b 
{
    final int c = da != 5;
    int cactus;
    void kori() 
    {
        int x;
        final float x = 1.224;
        b := this.call(leftRecursive, rightRecursive);
    }
    void main() 
    {
        for x := 1 downto -1 do
        {
            x := x + 5;
        }
    }
}
---
testcase349:
class Understandable extends GoodBoy {
    void Void() {}
}
---
testcase350:
class Point 
{
    int x, y;
    static float length(Point a; Point b) 
    {
        return Math.sqrt(Math.sqr(a.x - b.x) - (a.y - b.y));
    }
}
class Triangle 
{
    Point point1, point2, point3;
    float edge1, edge2, edge3;
    Triangle(Point p1; Point p2; Point p3) 
    {
        this.point1 := p1;
        this.point2 := p2;
        this.point3 := p3;
        this.edge1 := Point.length(p1, p2);
        this.edge2 := Point.length(p2, p3);
        this.edge3 := Point.length(p3, p1);
    }
    float circumference() 
    {
        return (this.edge1 + this.edge2 + this.edge3) / 2;
    }
    float area() 
    {
        float p;
        p := this.circumference();
        return Math.sqrt(p * (p - this.edge1) * (p - this.edge2) * (p - this.edge3));
    }
} 
class Program
{
    void main() 
    {
        Point p1, p2, p3;
        Triangle abc;
        float area;
        p1 := new Point(0, 0);
        p2 := new Point(0, 1);
        p3 := new Point(1, 0);
        abc := new Triangle(p1, p2, p3);
        area := abc.area();
        io.writeLn("Area of triangle: ", area);
    }
} 
---
testcase351:
class scope 
{
    int x()
    {
        int x;
        {
            int x = 10;
            {
                final int x = 10;
                {
                    final float x = 4.12342421312312e-234125;
                }
            }
        }
    }
}
---
testcase352:
class a extends b 
{
    a() {}
    int count(int a; Shape b; string c, d, e) {}
    float[5] getFloatArray() {}
    void main() 
    {
        a := 2;
        a.b := 5;
        for x := 5 to 10 do
            x := x + 5;
    }
    int okay() 
    {
        a := 2;
        a.b := 5;
        for x := 5 to 10 do
        {
            break;
            continue;
            return x == y;
        }
    }
}
---
testcase353:
class Rectangle extends Shape {
    float getArea(){
        if a + b == 5 then 
            a := b;
        continue;
    }
}
---
testcase354:
class a extends b 
{
    final int c = daaaaaa != 5;
    int cactus;
    void kori() 
    {
        int x;
        final float x = 1.224;
        b := this.call(leftRecursive, rightRecursive);
    }
    static void main() 
    {
        for x := 1 downto -1 do
        {
            x := x + 5;
        }
    }
}
---
testcase355:
class Point 
{
    int x, y;
    static float length(Point a; Point b) 
    {
        return Math.sqrt(Math.sqr(a.x - b.x) - (a.y - b.y));
    }
}
---
testcase356:
class Triangle 
{
    Point point1, point2, point3;
    float edge1, edge2, edge3;
    Triangle(Point p1; Point p2; Point p3) 
    {
        this.point1 := p1;
        this.point2 := p2;
        this.point3 := p3;
        this.edge1 := Point.length(p1, p2);
        this.edge2 := Point.length(p2, p3);
        this.edge3 := Point.length(p3, p1);
    }
    float circumference() 
    {
        return (this.edge1 + this.edge2 + this.edge3) / 2;
    }
    float area() 
    {
        float p;
        p := this.circumference();
        return Math.sqrt(p * (p - this.edge1) * (p - this.edge2) * (p - this.edge3));
    }
} 
class Program
{
    void main() 
    {
        Point p1, p2, p3;
        Triangle abc;
        float area;
        p1 := new Point(0, 0);
        p2 := new Point(0, 1);
        p3 := new Point(1, 0);
        abc := new Triangle(p1, p2, p3);
        area := abc.area();
        io.writeLn("Area of triangle: ", area);
    }
}
---
testcase357:
class test 
    {
        int foo()
        {
            a := b / 2 * n / 4 && 5 % g || 2 * 9 / 4 % 2;
        }
    }
---
testcase358:        
class test 
{
    static void main() 
    {
        int[5] Kori = {1,2,3,4,5};
        Kori[5] := 7;
        this.print(Kori, 0, 4);
    }
}
---
testcase359:
class a extends b 
{
    static int a, b = 5, c = 66, d, e, f = 77, g = 8;
    final static int a = 1, b = 2, c = 3;
}
---
testcase360:
class Employee {
    string name;
    int age;

    Employee(string n; int a) {
        this.name := n;
        this.age := a;
    }

    void display() {
        io.writeStrLn("Employee Name: " ^ this.name);
        io.writeStrLn("Employee Age: " ^ this.age);
    }
}
---
testcase361:
class Manager extends Employee {
    string department;

    Manager(string n; int a; string dept) {
        this.Employee(n, a);
        this.department := dept;
    }

    void display() {
        io.writeStrLn("Manager Name: " ^ this.name);
        io.writeStrLn("Manager Age: " ^ this.age);
        io.writeStrLn("Manager Department: " ^ this.department);
    }
}
---
testcase362:
class Developer extends Employee {
    string programmingLanguage;

    Developer(string n; int a; string lang) {
        this.Employee(n, a);
        this.programmingLanguage := lang;
    }

    void display() {
        io.writeStrLn("Developer Name: " ^ this.name);
        io.writeStrLn("Developer Age: " ^ this.age);
        io.writeStrLn("Programming Language: " ^ this.programmingLanguage);
    }
}
---
testcase363:
class Test { /*
    static void main() { 
        Employee emp = new Employee("John Doe", 30);
        Manager manager = new Manager("Alice Smith", 40, "HR");
        Developer developer = new Developer("Bob Johnson", 25, "Java");
        Employee e1 = manager;
        Employee e2 = developer;
        emp.display();
        e1.display();
        e2.display();
    }*/
}
---
testcase364:
class test {
    void foo(int a,b;float c) {
    string _str_,o,c;
    }
}
---
testcase365:
class test {
    void main() {
        a := +a;
    }
}
---
testcase366:
        class ABC /* extends ABC {}
        {string terrorist = "ho" */
        {}
---
testcase367:
class PPL {
    string PPL = "Principles of Programming Languages";
    string lecturer = "Dr. Nguyen Hua Phung";
    void main(){
        string con;
        con := lecturer ^ " - ";
    }
}
---
testcase368:
class test {
    int foo() {
        a [(1 + 2 * 3 - 4 / 5 && 6 || 7)*(1+2+3)-(4+5*6/abc && !(123))] := a[(((-5)))];
    }
}
---
testcase369:
class main {
    float getArea(){
        a[3+x.foo(2)] := a[b[2]] +3;
        return this.length*this.width;
    }
}
---
testcase370:
class main {
            float getArea(){
        x.b[2] := x.m()[3];
        #start of declaration part
        {
float r,s;
int[5] a,b;
#list of statements
r:=2.0;
s:=r*r*this.myPI;
a[0]:= s;
}
                return this.length*this.width;
                }
           }
---
testcase371:
class a {
           }
class b {
    a bb(){continue;xxx.xxx[2] := aaa.aaa(a)[aaa];}
}
---
testcase372:
class Vehicle {
    void move() {
        io.writeStrLn("Vehicle is moving.");
    }
}
---
testcase373:
class Car extends Vehicle {
    void move() {
        io.writeStrLn("Car is driving on the road.");
    }
}
---
testcase374:
class Bicycle extends Vehicle {
    void move() {
        io.writeStrLn("Bicycle is pedaling on the path.");
    }
}
---
testcase375:
class Test {
    void main() {
        Vehicle[5] vehicles;
        vehicles[0] := new Vehicle();
        vehicles[1] := new Car();
        vehicles[2] := new Bicycle();
        
        for v:=0 to vehicles do {
            v.move();
        }
    }
}
---
testcase376:
class Vehicle {
    void move() {
        io.writeStrLn("Vehicle is moving.");
    }
}
class Car extends Vehicle {
    void move() {
        io.writeStrLn("Car is driving on the road.");
    }
}

class Bicycle extends Vehicle {
    void move() {
        io.writeStrLn("Bicycle is pedaling on the path.");
    }
}

class Test {
    void main() {
        Vehicle[5] vehicles;
        vehicles[0] := new Vehicle();
        vehicles[1] := new Car();
        vehicles[2] := new Bicycle();
        
        for v:=0 to vehicles do {
            v.move();
        }
    }
}
---
testcase377:
class Character {
    string name;
    int level;

    Character(string n; int l) {
        this.name := n;
        this.level := l;
    }

    void displayInfo() {
        io.writeStrLn("Name: " ^ this.name);
        io.writeStrLn("Level: " ^ this.level);
    }
}
---
testcase378:
class Warrior extends Character {
    string weapon;

    Warrior(string n; int l, w) {
        this.Character(n, l);
        this.weapon := w;
    }

    void displayInfo() {
        io.writeStrLn("Warrior:");
        this.Character.displayInfo();
        io.writeStrLn("Weapon: " ^ this.weapon);
    }
}
---
testcase379:
class Mage extends Character {
    string spell;

    Mage(string n; int l, s) {
        this.Character(n, l);
        this.spell := s;
    }

    void displayInfo() {
        io.writeStrLn("Mage:");
        this.Character.displayInfo();
        io.writeStrLn("Spell: " ^ this.spell);
    }
}
---
testcase380:
class Test {
    static void main() {
        Warrior warrior = new Warrior("Conan", 25, "Greatsword");
        Mage mage = new Mage("Gandalf", 30, "Fireball");

        Character[2] characters;
        characters[0] := warrior;
        characters[1] := mage;

        for c:=lemgth downto characters do {
            c.displayInfo();
            io.writeStrLn();
        }
    }
}
---
testcase381:
class Character {
    string name;
    int level;

    Character(string n; int l) {
        this.name := n;
        this.level := l;
    }

    void displayInfo() {
        io.writeStrLn("Name: " ^ this.name);
        io.writeStrLn("Level: " ^ this.level);
    }
}

class Warrior extends Character {
    string weapon;

    Warrior(string n; int l, w) {
        this.Character(n, l);
        this.weapon := w;
    }

    void displayInfo() {
        io.writeStrLn("Warrior:");
        this.Character.displayInfo();
        io.writeStrLn("Weapon: " ^ this.weapon);
    }
}

class Mage extends Character {
    string spell;

    Mage(string n; int l, s) {
        this.Character(n, l);
        this.spell := s;
    }

    void displayInfo() {
        io.writeStrLn("Mage:");
        this.Character.displayInfo();
        io.writeStrLn("Spell: " ^ this.spell);
    }
}

class Test {
    void main() {
        Warrior warrior = new Warrior("Conan", 25, "Greatsword");
        Mage mage = new Mage("Gandalf", 30, "Fireball");

        Character[2] characters;
        characters[0] := warrior;
        characters[1] := mage;

        for c:=0 to characters do {
            c.displayInfo();
            io.writeStrLn();
        }
    }
}
---
testcase382:
class MergeSort {
    void merge(int left,middle; int right) {
        int n1 = middle - left + 1;
        int n2 = right - middle;
        int[0] leftArray;
        int[0] rightArray;

        for i := 0 to n1 - 1 do
            leftArray[i] := arr[left + i];

        for j := 0 to n2 - 1 do
            rightArray[j] := arr[middle + 1 + j];

         i := 0;
         j := 0;
         k := left;

        for k := left to right do{
            if i < n1 && ((j >= n2) || (leftArray[i] <= rightArray[j])) then{
                arr[k] := leftArray[i];
                i := i + 1;
            }
            else{
                arr[k] := rightArray[j];
                j := j + 1;
            }
        }
    }

    void mergeSort(int left; int right) {
        if left < right then {
            int middle = left + (right - left) / 2;
            this.mergeSort(arr, left, middle);
            this.mergeSort(arr, middle + 1, right);
            this.merge(arr, left, middle, right);
        }
    }
}
---
testcase383:
class TestMergeSort {
    static void main() {
        int[10] numbers = {5, 2, 8, 1, 9, 3, 7, 4, 6, 0};
        MergeSort sorter = new MergeSort();
        sorter.mergeSort(numbers, 0, numbers.length - 1);

        io.writeStrLn("Sorted Array:");
        for i := 0 to numbers.length - 1 do{
            io.writeInt(numbers[i]);
            io.writeChar(" ");
        }
    }
}
---
testcase384:
class BubbleSort {
    void sort(int[10] arr) {
        int temp;
        for i := 0 to length - 2 do {
            for j := 0 to length - 2 - i do {
                if arr[j] > arr[j + 1] then {
                   temp := arr[j];
                    arr[j] := arr[j + 1];
                    arr[j + 1] := temp;
                }
            }       
        }
    }

    void printArray(int[10] arr) {
        for i := 0 to length - 1 do {
            io.writeInt(arr[i]);
            io.writeChar(" ");
        }
    }
}
---
testcase385:
class TestBubbleSort {
    static void main() {
        int[7] array = {64, 34, 25, 12, 22, 11, 90};
        BubbleSort sorter = new BubbleSort();

        io.writeStrLn("Original array:");
        sorter.printArray(array);

        io.writeStrLn("\nSorted array:");
        sorter.sort(array);
        sorter.printArray(array);
    }
}
---
testcase386:
class MergeSort {
    void merge(int left,middle; int right) {
        int n1 = middle - left + 1;
        int n2 = right - middle;
        int[0] leftArray;
        int[0] rightArray;

        for i := 0 to n1 - 1 do
            leftArray[i] := arr[left + i];

        for j := 0 to n2 - 1 do
            rightArray[j] := arr[middle + 1 + j];

         i := 0;
         j := 0;
         k := left;

        for k := left to right do{
            if i < n1 && ((j >= n2) || (leftArray[i] <= rightArray[j])) then{
                arr[k] := leftArray[i];
                i := i + 1;
            }
            else{
                arr[k] := rightArray[j];
                j := j + 1;
            }
        }
    }

    void mergeSort(int left; int right) {
        if left < right then {
            int middle = left + (right - left) / 2;
            this.mergeSort(arr, left, middle);
            this.mergeSort(arr, middle + 1, right);
            this.merge(arr, left, middle, right);
        }
    }
}

class TestMergeSort {
    static void main() {
        int[10] numbers = {5, 2, 8, 1, 9, 3, 7, 4, 6, 0};
        MergeSort sorter = new MergeSort();
        sorter.mergeSort(numbers, 0, numbers.length - 1);

        io.writeStrLn("Sorted Array:");
        for i := 0 to numbers.length - 1 do{
            io.writeInt(numbers[i]);
            io.writeChar(" ");
        }
    }
}
---
testcase387:
class BubbleSort {
    void sort(int[10] arr) {
        int temp;
        for i := 0 to length - 2 do {
            for j := 0 to length - 2 - i do {
                if arr[j] > arr[j + 1] then {
                   temp := arr[j];
                    arr[j] := arr[j + 1];
                    arr[j + 1] := temp;
                }
            }       
        }
    }

    void printArray(int[10] arr) {
        for i := 0 to length - 1 do {
            io.writeInt(arr[i]);
            io.writeChar(" ");
        }
    }
}

class TestBubbleSort {
    static void main() {
        int[7] array = {64, 34, 25, 12, 22, 11, 90};
        BubbleSort sorter = new BubbleSort();

        io.writeStrLn("Original array:");
        sorter.printArray(array);

        io.writeStrLn("\nSorted array:");
        sorter.sort(array);
        sorter.printArray(array);
    }
}
---
testcase388:
class BinarySearch {
    int search(int[10] arr; int target; int low; int high) {
        int mid;
        if low > high then
            return -1; # Element not found
        
        mid := (low + high) / 2;
        
        if arr[mid] == target then
            return mid; # Element found at index 'mid'
        else 
            if arr[mid] > target then
                return this.search(arr, target, low, mid - 1); # Search in the left half
            else
            return this.search(arr, target, mid + 1, high); # Search in the right half
    }
}
---
testcase389:
class TestBinarySearch {
    static void main() {
        int[10] sortedArray = {2, 5, 8, 12, 16, 23, 38, 56, 72, 91};
        int target = 23;
        
        BinarySearch searchAlgorithm = new BinarySearch();
        int result = searchAlgorithm.search(sortedArray, target, 0, sortedArray.length - 1);
        
        if result != -1 then
            io.writeStrLn("Element " ^ target ^ " found at index " ^ result);
        else
            io.writeStrLn("Element " ^ target ^ " not found in the array");
    }
}
---
testcase390:
class BinarySearch {
    int search(int[10] arr; int target; int low; int high) {
        int mid;
        if low > high then
            return -1; # Element not found
        
        mid := (low + high) / 2;
        
        if arr[mid] == target then
            return mid; # Element found at index 'mid'
        else 
            if arr[mid] > target then
                return this.search(arr, target, low, mid - 1); # Search in the left half
            else
            return this.search(arr, target, mid + 1, high); # Search in the right half
    }
}

class TestBinarySearch {
    static void main() {
        int[10] sortedArray = {2, 5, 8, 12, 16, 23, 38, 56, 72, 91};
        int target = 23;
        
        BinarySearch searchAlgorithm = new BinarySearch();
        int result = searchAlgorithm.search(sortedArray, target, 0, sortedArray.length - 1);
        
        if result != -1 then
            io.writeStrLn("Element " ^ target ^ " found at index " ^ result);
        else
            io.writeStrLn("Element " ^ target ^ " not found in the array");
    }
}
---
testcase391:
class Account {
    int accountNumber;
    float balance;

    Account(int number) {
        this.accountNumber := number;
        this.balance := 0.0;
    }

    void deposit(float amount) {
        this.balance := this.balance + amount;
    }

    void withdraw(float amount) {
        if amount <= this.balance then
            this.balance := this.balance - amount;
    
    }

    float getBalance() {
        return this.balance;
    }
}
---
testcase392:
class SavingsAccount extends Account {
    float interestRate;

    SavingsAccount(int number; float rate) {
        this.Account(number);
        this.interestRate := rate;
    }

    void applyInterest() {
        float interest = this.balance * this.interestRate;
        this.deposit(interest);
    }
}
---
testcase393:
class CheckingAccount extends Account {
    float overdraftLimit;

    CheckingAccount(int number; float limit) {
        this.Account(number);
        this.overdraftLimit := limit;
    }

    void withdraw(float amount) {
        if amount <= this.balance + this.overdraftLimit then
            this.balance := this.balance - amount;
    }
}
---
testcase394:
class Bank {
    Account[10] accounts;

    Bank(int numAccounts) {
        this.accounts := new Account();
        for i := 0 to numAccounts - 1 do
            if i % 2 == 0 then
                this.accounts[i] := new SavingsAccount(i, 0.05);
            else
                this.accounts[i] := new CheckingAccount(i, 500.0);
        
        
    }

    void simulateTransactions() {
        for i := 0 to this.accounts.length - 1 do
            if this.accounts[i] == SavingsAccount then {
                SavingsAccount sa = this.accounts[i];
                sa.deposit(100.0);
                sa.applyInterest();
            }
            else{
                CheckingAccount ca = this.accounts[i];
                ca.deposit(200.0);
                ca.withdraw(300.0);
            }
        
    }

    void printAccountBalances() {
        for i := 0 to this.accounts.length - 1 do
            io.writeStrLn("Account " ^ i ^ " Balance: " ^ (this.accounts[i]).getBalance());
        
    }
}
---
testcase395:
class TestBank {
    void main() {
        Bank bank = new Bank(10);
        bank.simulateTransactions();
        bank.printAccountBalances();
    }
}
---
testcase396:
class Account {
    int accountNumber;
    float balance;

    Account(int number) {
        this.accountNumber := number;
        this.balance := 0.0;
    }

    void deposit(float amount) {
        this.balance := this.balance + amount;
    }

    void withdraw(float amount) {
        if amount <= this.balance then
            this.balance := this.balance - amount;
    
    }

    float getBalance() {
        return this.balance;
    }
}

class SavingsAccount extends Account {
    float interestRate;

    SavingsAccount(int number; float rate) {
        this.Account(number);
        this.interestRate := rate;
    }

    void applyInterest() {
        float interest = this.balance * this.interestRate;
        this.deposit(interest);
    }
}

class CheckingAccount extends Account {
    float overdraftLimit;

    CheckingAccount(int number; float limit) {
        this.Account(number);
        this.overdraftLimit := limit;
    }

    void withdraw(float amount) {
        if amount <= this.balance + this.overdraftLimit then
            this.balance := this.balance - amount;
    }
}

class Bank {
    Account[10] accounts;

    Bank(int numAccounts) {
        this.accounts := new Account();
        for i := 0 to numAccounts - 1 do
            if i % 2 == 0 then
                this.accounts[i] := new SavingsAccount(i, 0.05);
            else
                this.accounts[i] := new CheckingAccount(i, 500.0);
        
        
    }

    void simulateTransactions() {
        for i := 0 to this.accounts.length - 1 do
            if this.accounts[i] == SavingsAccount then {
                SavingsAccount sa = this.accounts[i];
                sa.deposit(100.0);
                sa.applyInterest();
            }
            else{
                CheckingAccount ca = this.accounts[i];
                ca.deposit(200.0);
                ca.withdraw(300.0);
            }
        
    }

    void printAccountBalances() {
        for i := 0 to this.accounts.length - 1 do
            io.writeStrLn("Account " ^ i ^ " Balance: " ^ (this.accounts[i]).getBalance());
        
    }
}

class TestBank {
    void main() {
        Bank bank = new Bank(10);
        bank.simulateTransactions();
        bank.printAccountBalances();
 
   }
}
---
testcase397:
class OperatorTest {
    void main() {
        {
        int a = 10;
        int b = 20;
        float x = 15.5;
        boolean condition = true;

        int result1 = (a + b) * (b - a) / 2;
        float result2 = (a * b + x) / (x - b);
        boolean result3 = (a < b) && (x >= a) || condition;

        io.writeStrLn("Result 1: " ^ result1);
        io.writeStrLn("Result 2: " ^ result2);
        io.writeStrLn("Result 3: " ^ result3);
        }
        {
        int[5] numbers = {1, 2, 3, 4, 5};
        int sum = 0;
        for i := 0 to numbers.length - 1 do {
            sum := sum + numbers[i];
        }

        if sum % 2 == 0 then {
            io.writeStrLn("Sum of numbers is even.");
        } else {
            io.writeStrLn("Sum of numbers is odd.");
        }
        }
    }
}
---
testcase398:
class SuperComplexTest {
    static float customPower(float base; int exponent) {
        if (exponent == 0) then {
            return 1;
        } else if (exponent % 2 == 0) then {
            float temp = this.customPower(base, exponent / 2);
            return temp * temp;
        } else {
            float temp = this.customPower(base, (exponent - 1) / 2);
            return base * temp * temp;
        }
    }

    static int fibonacci(int n) {
        if (n <= 1) then {
            return n;
        } else {
            return this.fibonacci(n - 1) + this.fibonacci(n - 2);
        }
    }

    static void main() {
        float sum = 0;
        int finalValue = 0;
        for i := 1 to 10 do {
            int factorial = 1;
            int fibonacciSum = 0;

            for j := 1 to i do {
                factorial := factorial * j;
                fibonacciSum := fibonacciSum + this.fibonacci(j);
            }
            {
            float customPowerResult = this.customPower(factorial, i);
            sum := sum + customPowerResult * fibonacciSum;
            }
        }

        

        for k := 1 to 5 do {
            if (k % 2 == 0)then {
                finalValue := finalValue + this.customPower(sum, k) + k;
            } else {
                finalValue := finalValue - this.customPower(sum, k) - k;
            }
        }

        io.writeStrLn("Final Value: " ^ finalValue);
    }
}
---
testcase399:
class UltraComplexTest {
    static int factorial(int n) {
        if (n <= 1)then {
            return 1;
        } else {
            return n * this.factorial(n - 1);
        }
    }

    static int gcd(int a, b) {
        if (b == 0) then {
            return a;
        } else {
            return this.gcd(b, a % b);
        }
    }

    static float computeSeries(int x) {
        float result = 0;

        for i := 1 to 10 do {
            result := result + this.customPower(x, i) / this.factorial(i);
        }

        return result;
    }

    static float customPower(float base; int exponent) {
        if (exponent == 0) then {
            return 1;
        } else if (exponent % 2 == 0) then {
            float temp = this.customPower(base, exponent / 2);
            return temp * temp;
        } else {
            float temp = this.customPower(base, (exponent - 1) / 2);
            return base * temp * temp;
        }
    }

    static void main() {
        int finalResult = 0;

        for a := 1 to 5 do {
            for b := 1 to 5 do {
                if (a != b) then {
                    for c := 1 to 5 do {
                        for d := 1 to 5 do {
                            if (c != d) then {
                                int gcdValue = this.gcd(a * b, c * d);
                                int sum = a + b + c + d;

                                float seriesResult = this.computeSeries(sum);

                                if (gcdValue % 2 == 0) then {
                                    finalResult := finalResult + (seriesResult * gcdValue);
                                } else {
                                    finalResult := finalResult -  (seriesResult / gcdValue);
                                }
                            }
                        }
                    }
                }
            }
        }

        io.writeStrLn("Final Result: " ^ finalResult);
    }
}
---
